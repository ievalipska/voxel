[
  {
    "name": "Camera.java",
    "path": "src/com/ch/Camera.java",
    "content": {
      "structured": {
        "description": "A camera class that can perform various camera operations such as projection, viewport adjustment, and transformation. The class has an abstract base class with similar functionalities and an additional calculation for the projection matrix. The `getViewProjection()` method calculates the view projection matrix based on the rotation and translation of the camera, while the `calculateProjectionMatrix()` method performs the same calculation for a specific type of camera struct. The `adjustToViewport()` method adjusts the camera to fit within a specified viewport size.",
        "items": [
          {
            "id": "6aa18286-aac2-38b9-db42-8ad14898e28f",
            "ancestors": [],
            "type": "function",
            "description": "Is an abstract class that provides various methods for manipulating and querying camera data. It includes fields for projection, viewProjectionMat4, values, transform, and calculation methods for calculateViewMatrix(), getTranslationMatrix(), and adjustToViewport(). Additionally, it has a sub-class called CameraStruct with its own methods for calculating projection matrices and adjusting to viewports.",
            "name": "Camera",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 50,
            "docLength": null
          },
          {
            "id": "91230e03-89a6-f3b7-1d4f-053acaad2093",
            "ancestors": [
              "6aa18286-aac2-38b9-db42-8ad14898e28f"
            ],
            "type": "function",
            "description": "Retrieves a `Matrix4f` object representing the view projection matrix, which is used to transform 3D space coordinates into screen coordinates for rendering. If the matrix has changed or was not previously set, it calculates and caches the view matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object containing the view projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "import com.ch.math.Matrix4f;\nimport com.ch.Camera;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tMatrix4f projection = new Matrix4f().initPerspective(60, 1, 0.1, 100);\n\t\tCamera camera = new Camera(projection);\n\n\t\tMatrix4f viewProjection = camera.getViewProjection();\n\n\t\t// Use the viewProjection matrix in your rendering code\n\t}\n}\n",
              "description": ""
            },
            "name": "getViewProjection",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "97cb0399-2a88-4986-4f4f-723579f78c18",
            "ancestors": [
              "6aa18286-aac2-38b9-db42-8ad14898e28f"
            ],
            "type": "function",
            "description": "Calculates the view matrix by multiplying the camera rotation and translation matrices, and then applying the projection matrix to the resulting matrix.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 transformation matrix representing the view and projection of a 3D camera.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyCamera extends Camera {\n    public MyCamera(Matrix4f projection) {\n        super(projection);\n    }\n\n    @Override\n    public Matrix4f calculateProjectionMatrix(CameraStruct data) {\n        // Implement your own logic to create the projection matrix.\n        return new Matrix4f();\n    }\n\n    @Override\n    public void adjustToViewport(int width, int height) {\n        // Implement your own logic to adjust the viewport dimensions.\n    }\n}\n\npublic class MyApplication {\n    public static void main(String[] args) {\n        // Create a camera instance with a projection matrix\n        Matrix4f projectionMatrix = new Matrix4f();\n        MyCamera camera = new MyCamera(projectionMatrix);\n        \n        // Use the calculateViewMatrix method to generate the view matrix\n        Matrix4f viewMatrix = camera.calculateViewMatrix();\n        \n        // Use the view matrix and projection matrix to render a scene\n        // ...\n    }\n}\n",
              "description": ""
            },
            "name": "calculateViewMatrix",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "e5897890-555f-659a-0d42-33157ece6d14",
            "ancestors": [
              "6aa18286-aac2-38b9-db42-8ad14898e28f"
            ],
            "type": "function",
            "description": "Generates a matrix that represents the translation of a virtual camera in 3D space, based on its current position and the negative sign used to reflect the direction of movement.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 transformation matrix representing the translation of the camera position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    // create a new Transform object\n    Transform transform = new Transform();\n    \n    // set the position of the Transform object to (1, 2, 3)\n    transform.setPosition(new Vector3f(1, 2, 3));\n    \n    // create a new Camera object with the given projection matrix\n    Matrix4f projection = new Matrix4f();\n    Camera camera = new Camera(projection);\n    \n    // get the translation matrix of the camera\n    Matrix4f translationMatrix = camera.getTranslationMatrix();\n    \n    // print the translation matrix to the console\n    System.out.println(translationMatrix);\n}\n",
              "description": ""
            },
            "name": "getTranslationMatrix",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "9d7d4e13-eedc-d5a6-a246-1030ea5223c1",
            "ancestors": [
              "6aa18286-aac2-38b9-db42-8ad14898e28f"
            ],
            "type": "function",
            "description": "Retrieves and returns a `Transform` object, which represents a mapping from input values to output values.",
            "params": [],
            "returns": {
              "type_name": "Transform",
              "description": "a reference to the `transform` object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera camera = new Camera();\nTransform transform = camera.getTransform();\n",
              "description": "\nIn this example, we are creating a new instance of the Camera class and then using the getTransform method to retrieve its transform object. We can then manipulate the transform object as needed."
            },
            "name": "getTransform",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3b8dd90c-5648-6892-2c44-2e0049f66388",
            "ancestors": [
              "6aa18286-aac2-38b9-db42-8ad14898e28f"
            ],
            "type": "function",
            "description": "Is an abstract class that serves as a base for other classes in the Camera package. It has an abstract method called `getAsMatrix4()` that returns a Matrix4f object, but its implementation details are not shown in the provided code snippet. This class likely provides some common functionality or properties to its subclasses, such as matrix multiplication or transformation.",
            "name": "CameraStruct",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 5,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Model.java",
    "path": "src/com/ch/Model.java",
    "content": {
      "structured": {
        "description": "A `Model` class that loads 3D model data from a buffer object (BO) and an element array buffer (EAB). The Model class has several methods for binding and unbinding vertex arrays (VAOs), enabling and disabling vertex attributes, getting VAO handles, and storing data in VBOs and EABs. Additionally, the code provides a method for loading a model from a float array and an integer array.",
        "items": [
          {
            "id": "f48404ba-4cb8-b2a3-7546-c91225a796e0",
            "ancestors": [],
            "type": "function",
            "description": "Is used for storing and manipulating data in a 3D model. It can load vertices and indices from an array and enable vertex attribs. It also has methods to draw the model, store data, and disable attribs. Additionally, it provides a way to get the VAO (VerteX Array Object) handle and size of the model.",
            "name": "Model",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 73,
            "docLength": null
          },
          {
            "id": "c940ac2f-1fd8-a290-1a43-e9315b3abbb3",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Binds a vertex array object, enables vertex attributes, and draws triangles using either glDrawArrays or glDrawElements depending on the number of vertices provided.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Game{\n\tprivate Model model;\n\n\tpublic void start(){\n\t\tmodel = Model.load(vertices, indices);\n\t}\n\n\tpublic void render(){\n\t\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);\n\t\tGL30.glBindVertexArray(model.getVAO());\n\t\tmodel.draw();\n\t\tGL30.glBindVertexArray(0);\n\t}\n}\n",
              "description": "\nIn this example, the model is loaded using the `load` method, which takes in an array of vertices and an array of indices. The `start` method binds the vertex array object (VAO) to the OpenGL context, and the `render` method draws the model using the `draw` method. Note that the VAO is bound and unbound before and after the call to `draw`, respectively."
            },
            "name": "draw",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "6c0213a1-0d13-2d9f-774e-96047b49f7c2",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Enables vertex attributes 0 and 1 for rendering.",
            "params": [],
            "name": "enableAttribs",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "19f40a8e-14c4-c5b0-e343-5476f63c8daf",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Disables vertex attribute arrays 0 and 1 for the currently bound graphics context.",
            "params": [],
            "name": "disableAttribs",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "15ee7d64-fb53-fdb0-534e-e7a3b31bc810",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Returns the value of a variable `vao`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing the VAO.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Model model = new Model(vao, v_count);\nint vaoId = model.getVAO();\n",
              "description": ""
            },
            "name": "getVAO",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7a43a11d-48eb-6f96-c640-bd38b5d6fb26",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Returns the current size of an object's storage.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "the value of the `size` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "int size = model.getSize();\n",
              "description": ""
            },
            "name": "getSize",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4122f82d-33bb-888d-6946-b0ac7084274f",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Loads a 3D model from an array of vertices and an array of indices, creates a Vertex Array Object (VAO), stores the data, binds the VAO, and returns a `Model` object representing the loaded model.",
            "params": [
              {
                "name": "vertices",
                "type_name": "float[]",
                "description": "3D vertex data of the model to be loaded.",
                "complex_type": false
              },
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "3D coordinates of the vertices in the model, which are used to bind the vertices to the corresponding indices in the vertex array object (VAO) during rendering.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object representing the loaded 3D model.",
              "complex_type": false
            },
            "name": "load",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "522a5e29-ea37-6da2-c544-95b178f2797a",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Generates a new vertex array object (VAO) using `glGenVertexArrays()` and binds it to the current context using `glBindVertexArray()`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer value representing a valid vertex array object (VBO) handle.",
              "complex_type": false
            },
            "name": "createVAO",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "2212a060-e777-dbae-534a-798f2e959520",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "* Creates a vertex buffer object (VBO) using `glGenBuffers()`.\n* Binds the VBO to the GPU using `glBindBuffer()`.\n* Stores the input data as a float array in the VBO using `glBufferData()`.",
            "params": [
              {
                "name": "attrib",
                "type_name": "int",
                "description": "2D vertex attribute index that stores the data in the VBO.",
                "complex_type": false
              },
              {
                "name": "data",
                "type_name": "float[]",
                "description": "3D data to be stored in the vertex buffer object (VBO).",
                "complex_type": false
              }
            ],
            "name": "storeData",
            "location": {
              "start": 61,
              "insert": 61,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "ea6d272e-9f3d-00b6-b34f-23382afa33a7",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Stores an array of indices into a buffer for static draw calls.",
            "params": [
              {
                "name": "indices",
                "type_name": "int[]",
                "description": "3D vertex positions to be stored in an element array buffer for rendering purposes.",
                "complex_type": false
              }
            ],
            "name": "storeIndices",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "86c926f0-6000-4ebe-454e-9015a4029bed",
            "ancestors": [
              "f48404ba-4cb8-b2a3-7546-c91225a796e0"
            ],
            "type": "function",
            "description": "Disconnects a vertex array object (VAO) from its current binding in the GPU.",
            "params": [],
            "name": "unbindVAO",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Shader.java",
    "path": "src/com/ch/Shader.java",
    "content": {
      "structured": {
        "description": "A `Shader` class that loads and manages OpenGL shaders. It allows for the creation and binding of shaders, uniform floats, and matrices, as well as validating and linking the program. The code uses the `GL20` package for OpenGL functionality.",
        "items": [
          {
            "id": "af8a0eab-6f19-ff83-364b-3ee7cbc4218f",
            "ancestors": [],
            "type": "function",
            "description": "Is used to create and manage shaders for use in a 3D graphics pipeline. It provides methods for binding a program, getting the program, uniform floats, uniform matrices, and validating the program. The class also provides utilities for loading shader code from files.",
            "name": "Shader",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 97,
            "docLength": null
          },
          {
            "id": "f92f19fd-0be1-7d8d-1943-580cf5a153f6",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Glues a program to the current GL context, enabling its use for rendering.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\tGL20.glUseProgram(program);\n}\n",
              "description": "\nThis method calls the OpenGL API function glUseProgram to bind a shader program to the current rendering state. It takes the program variable as an argument, which is an integer representing the handle of the shader program that should be bound. This method will typically be called at the beginning of each frame to ensure that the correct shader program is being used for the upcoming render operation."
            },
            "name": "bind",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "db976eb3-c7b1-0691-1146-fe0d64d4aaca",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Returns the value of a field called `program`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representation of the program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    Shader shader = new Shader(\"shader\");\n    int program = shader.getProgram();\n}\n",
              "description": ""
            },
            "name": "getProgram",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "08ae9720-9bf2-c89b-cb4e-a508f500aeb7",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "In Java takes a string `name` and an array of floating-point values `vals`. It applies the corresponding GL uniform function to the value at the specified location.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "name of the uniform location being modified.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "float val1 = 20; // single float value\nfloat val2 = 30; // multiple float values\nfloat val3[] = {1,2,3}; // array of float values\n\n// passing a single float value\nuniformf(\"myFloat\", val1);\n\n// passing multiple float values\nuniformf(\"myFloats\", val2, val3[0], val3[1], val3[2]);\n",
              "description": ""
            },
            "name": "uniformf",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "0f7defb1-c0ba-dbb1-ec40-5d516712ee97",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Sets a 4x4 matrix to a uniform buffer using the `glUniformMatrix4` method from OpenGL's GL20 class, passing the matrix data as a flipped buffer.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of a uniform buffer location for storing a 4x4 matrix.",
                "complex_type": false
              },
              {
                "name": "mat",
                "type_name": "Matrix4f",
                "description": "4x4 matrix of uniform values that will be uploaded to the GPU as a unified array through the `GL20.glUniformMatrix4()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Matrix4f view = new Matrix4f();\nview.identity().translate(0, 1, -3);\nshader.uniformMat4(\"modelView\", view);\n",
              "description": "\nIn this code snippet, the Matrix4f object is created and assigned to a variable named \"view\". The identity() method of the Matrix4f object initializes the matrix to an identity matrix, and then the translate() method is called on it with parameters (0, 1, -3), which translates the matrix by those amounts.\nThe uniformMat4 method is then called on the Shader object, passing in the name of the uniform variable (\"modelView\") as a string, and the Matrix4f object created as a parameter. The getLoaction() method is used to retrieve the location of the uniform variable within the shader program, and the Util.createFlippedBuffer() method is then called on that location, passing in the linear data of the Matrix4f object. This creates an OpenGL-compatible buffer containing the matrix values for use in the shader program.\nThe result of this code is that a uniform variable named \"modelView\" will be set to the value of the view matrix within the shader program."
            },
            "name": "unifromMat4",
            "location": {
              "start": 52,
              "insert": 52,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "298dfdd0-77e0-6ea6-fd4f-1a850a6d721f",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Retrieves the uniform location of a named uniform in a GL20 program.",
            "params": [
              {
                "name": "name",
                "type_name": "String",
                "description": "0-based index of a uniform location to retrieve in the OpenGL 2.0 program.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the location of a uniform in a GPU program.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Shader shader = Shader.loadShader(\"myshader\");\nint location = shader.getLoaction(\"uniform_name\");\nGL20.glUniform1f(location, 5);\n",
              "description": ""
            },
            "name": "getLoaction",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "707180fe-47ff-e997-8c44-50ee7af6c6be",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Loads a shader program from a file and validates it, returning a new `Shader` object representing the program.",
            "params": [
              {
                "name": "filename",
                "type_name": "String",
                "description": "name of a shader file that contains the vertex and fragment shaders to be loaded by the `loadShader()` function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Shader",
              "description": "a new `Shader` object representing a compiled shader program.",
              "complex_type": false
            },
            "name": "loadShader",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "a4c3563d-d07e-12bf-f74d-61ac4cd5ab32",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Creates a shader program and loads a shader source code into it. It compiles the shader and attaches it to the program. If compilation fails, an error message is printed and the program exits.",
            "params": [
              {
                "name": "target",
                "type_name": "int",
                "description": "type of shader being created, which determines the shader's functionality and is one of the four values defined by the GL20 class.",
                "complex_type": false
              },
              {
                "name": "src",
                "type_name": "String",
                "description": "1:1 representation of the source code for the shader, which is passed as a string to the `GL20.glShaderSource()` method for compilation.",
                "complex_type": false
              },
              {
                "name": "program",
                "type_name": "int",
                "description": "3D game engine program that the shader will be attached to after being compiled.",
                "complex_type": false
              }
            ],
            "name": "loadShader",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 13,
            "docLength": null
          },
          {
            "id": "853359c9-a961-bbad-5643-7d28b7553ff2",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Links and validates a GPU program with the given ID, checking for errors and exiting the application if any are found.",
            "params": [
              {
                "name": "program",
                "type_name": "int",
                "description": "3D graphics program to be validated and linked, which is passed through the `glLinkProgram()` and `glValidateProgram()` functions for verification and linking.",
                "complex_type": false
              }
            ],
            "name": "validateProgram",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "98ff94ae-ce54-929a-9346-305737b01d18",
            "ancestors": [
              "af8a0eab-6f19-ff83-364b-3ee7cbc4218f"
            ],
            "type": "function",
            "description": "Reads the contents of a given file as a string, handling potential exceptions gracefully.",
            "params": [
              {
                "name": "file",
                "type_name": "String",
                "description": "file whose contents are to be read and returned as a string.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representation of the contents of the specified file.",
              "complex_type": false
            },
            "name": "getText",
            "location": {
              "start": 100,
              "insert": 100,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "res/shaders/Texture.java",
    "content": {
      "structured": {
        "description": "A class `Texture` that loads and manages textures for use in an OpenGL application. It uses the `GL11` and `GL30` packages to create and manage textures, as well as the `BufferedImage` class to read and manipulate image data. The `loadTexture()` method reads an image file and returns a texture ID that can be used to bind and render the texture in OpenGL. The `bind()` and `bind(int samplerSlot)` methods bind the specified texture to a specific texture slot, while the `getID()` method returns the ID of the bound texture.",
        "items": [
          {
            "id": "64d2697b-a4d0-219f-0440-92c8f21c68c3",
            "ancestors": [],
            "type": "function",
            "description": "Is used to handle texture mapping in OpenGL. It provides a simple way to load and bind textures to OpenGL surfaces. The class takes a filename as a constructor parameter and loads the texture data from the file using ImageIO. The loaded texture data is then bound to an OpenGL surface using the `bind()` method. The `getID()` method returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 80,
            "docLength": null
          },
          {
            "id": "53df2853-6370-c295-8d46-b182c6ce75e6",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Is a hook that allows for custom cleanup code to be executed when an object is about to be garbage collected.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n\t@Override\n\tprotected void finalize() {\n\t\tSystem.out.println(\"Finalizing\");\n\t}\n}\n\npublic static void main(String[] args) {\n\tMyClass myObject = new MyClass();\n\tmyObject = null; // This is where the garbage collector would pick up the object.\n}\n",
              "description": "\nThis code would print out \"Finalizing\" when the garbage collector picks up the object.  The finalize method should be used to free resources that your objects use, as they are about to be thrown away."
            },
            "name": "finalize",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d225b6d2-dcdf-3dbb-3147-60f3737ba5a0",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "0 is used to bind a listener to a particular event.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "import java.io.*;\nimport java.nio.*;\nimport javax.imageio.*;\nimport org.lwjgl.opengl.*;\n\npublic class Texture {\n    private int id;\n    \n    public void bind() {\n        glActiveTexture(GL_TEXTURE0 + 0);\n        glBindTexture(GL_TEXTURE_2D, id);\n    }\n}\n\npublic static void main(String[] args) {\n    Texture texture = new Texture(\"image.png\");\n    \n    texture.bind();\n    \n    GL11.glBegin(GL11.GL_QUADS);\n    GL11.glTexCoord2f(0, 0);\n    GL11.glVertex2f(-1, -1);\n    GL11.glTexCoord2f(1, 0);\n    GL11.glVertex2f(1, -1);\n    GL11.glTexCoord2f(1, 1);\n    GL11.glVertex2f(1, 1);\n    GL11.glTexCoord2f(0, 1);\n    GL11.glVertex2f(-1, 1);\n    GL11.glEnd();\n}\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "de7e633b-0d54-66bc-0049-52450449ad11",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Sets the active texture slot to a specific value (0-31) and binds a texture ID to that slot using the `glBindTexture()` method.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot to bind, with a range of 0 to 31.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "//Bind texture to sampler slot 0.\nTexture myTexture = new Texture(\"myTexture.png\");\nmyTexture.bind(0);\n",
              "description": ""
            },
            "name": "bind",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "ab2a90ca-ea27-2b8e-bd4b-76fefcf18f32",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Returns the `id` variable's value.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the value of the `id` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"grass.png\");\nint id = texture.getID();\n",
              "description": "\nIn this example, a new instance of the Texture class is created with the name \"grass.png\". Then, the value returned by the getID() method is assigned to an integer variable named \"id\". The code then uses this integer to access and manipulate the texture in some way."
            },
            "name": "getID",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "24a8ff9c-5bdb-28a4-2143-70ada16c9e54",
            "ancestors": [
              "64d2697b-a4d0-219f-0440-92c8f21c68c3"
            ],
            "type": "function",
            "description": "Loads a 2D texture from an image file and stores it in a GL texture object, optionally generating mipmaps.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "file path of the texture image to load.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an integer identifier of a texture object created from an image file.",
              "complex_type": false
            },
            "name": "loadTexture",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 49,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Camera3D.java",
    "path": "src/com/ch/Camera3D.java",
    "content": {
      "structured": {
        "description": "a `Camera3D` class that extends the `Camera` class and provides additional functionality for handling 3D camera inputs and calculations. The code uses the LWJGL library for input handling and the OpenGL library for rendering. The `Camera3D` class has a constructor that takes FOV, aspect ratio, near plane distance, and far plane distance as parameters and initializes the camera's matrix and viewport dimensions. It also defines a `calculateProjectionMatrix()` method to calculate the camera's projection matrix based on the provided values. The code also includes an `adjustToViewport()` method that adjusts the camera's viewport dimensions based on the window size, and a `processInput()` method that handles keyboard and mouse inputs and calculates the camera's position and rotation based on those inputs.",
        "items": [
          {
            "id": "cb92337b-15a2-4891-1245-00c8e811265c",
            "ancestors": [],
            "type": "function",
            "description": "Is an extension of the Camera class that includes additional functionality for manipulating camera views in 3D space. It takes in four parameters to initialize its values, including the field of view (fov), aspect ratio, near plane (zNear), and far plane (zFar). The class has a protected inner class called CameraStruct3D that contains the camera's perspective projection matrix. The processInput method processes input from the mouse and keyboard to rotate the camera and move it in 3D space.",
            "name": "Camera3D",
            "location": {
              "start": 10,
              "insert": 10,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "39fc4088-a705-7db8-b142-dfbc9f2ff5a1",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c"
            ],
            "type": "function",
            "description": "Calculates and returns a matrix that represents the projection of a 3D scene onto a 2D plane, based on the data provided by the `CameraStruct` object.",
            "params": [
              {
                "name": "data",
                "type_name": "CameraStruct",
                "description": "3D camera's configuration, including its position, orientation, and other parameters that are used to calculate the perspective projection matrix.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the projection matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(fov, aspect, zNear, zFar);\nCameraStruct data = new CameraStruct3D(fov, aspect, zNear, zFar);\ncamera.calculateProjectionMatrix(data);\n",
              "description": ""
            },
            "name": "calculateProjectionMatrix",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "754f13af-dcb4-8dba-8644-8ef00967ef14",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c"
            ],
            "type": "function",
            "description": "Adjusts a 3D camera's aspect ratio and projection matrix based on the viewport dimensions, then sets the camera's position and orientation using the calculated view matrix.",
            "params": [
              {
                "name": "width",
                "type_name": "int",
                "description": "2D viewport width of the camera's field of view.",
                "complex_type": false
              },
              {
                "name": "height",
                "type_name": "int",
                "description": "2D viewport size of the display device, which is used to calculate the projection and view matrices and set the 2D viewport dimensions in the OpenGL context.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45, 16f / 9f, 0.1f, 100.0f);\n\n// Adjust the viewport to a new width and height\ncamera.adjustToViewport(800, 600);\n",
              "description": "\nThe adjustToViewport method is called on the camera object with two integers, width and height as arguments, indicating the new dimensions of the viewport. This method then updates the aspect ratio of the camera struct and recalculates the projection matrix before calling calculateViewMatrix to update the view matrix and finally setting the OpenGL viewport using GL11.glViewport."
            },
            "name": "adjustToViewport",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "7fe54aaf-076e-1190-424d-28d93c1ce245",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c"
            ],
            "type": "function",
            "description": "Is a subclass of the Camera struct that contains additional fields for controlling the camera's perspective view. It has a constructor that takes in fov, aspect, zNear, and zFar parameters to set the camera's perspectives. The class also includes a getAsMatrix4() method that returns a Matrix4f object representing the camera's perspective projection matrix.",
            "name": "CameraStruct3D",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "class",
            "length": 16,
            "docLength": null
          },
          {
            "id": "3a27d285-e3f2-40b6-5340-4ec8f13344e3",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c",
              "7fe54aaf-076e-1190-424d-28d93c1ce245"
            ],
            "type": "function",
            "description": "Initializes a matrix representing a perspective projection, with parameters `fov`, `aspect`, `zNear`, and `zFar`.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 floating-point matrix representing a perspective projection.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(45, 16/9, 0.1f, 100);\ncamera.adjustToViewport(1280, 720);\nMatrix4f projectionMatrix = camera.getAsMatrix4();\n",
              "description": ""
            },
            "name": "getAsMatrix4",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "32a37420-b245-16ab-cb4b-69432bf94c73",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c"
            ],
            "type": "function",
            "description": "Processes input events from the mouse and keyboard, applying rotations and movements to an object's transform based on user inputs.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "time step or elapsed time since the last frame, which is used to calculate the movement of the object based on keyboard inputs.",
                "complex_type": false
              },
              {
                "name": "speed",
                "type_name": "float",
                "description": "3D movement speed of the object being controlled by the user, and it is multiplied by the time interval `dt` to determine the total distance traveled during that time.",
                "complex_type": false
              },
              {
                "name": "sens",
                "type_name": "float",
                "description": "sensitivity of the movement, which determines how much the character will move when the user moves the mouse cursor.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void processInput(float dt, float speed, float sens) {\n\t// Handle mouse input\n\tfloat dx = Mouse.getDX();\n\tfloat dy = Mouse.getDY();\n\tfloat roty = (float)Math.toRadians(dx * sens);\n\tgetTransform().rotate(new Vector3f(0, 1, 0), (float) roty);\n\tgetTransform().rotate(getTransform().getRot().getRight(), (float) -Math.toRadians(dy * sens));\n\t\n\t// Handle keyboard input\n\tif (Keyboard.isKeyDown(Keyboard.KEY_LSHIFT)) {\n\t\tspeed *= 10;\n\t}\n\t\n\tfloat movAmt = speed * dt;\n\n\tif (Keyboard.isKeyDown(Keyboard.KEY_W)) {\n\t\tmove(getTransform().getRot().getForward(), movAmt);\n\t}\n\tif (Keyboard.isKeyDown(Keyboard.KEY_S)) {\n\t\tmove(getTransform().getRot().getForward(), -movAmt);\n\t}\n\tif (Keyboard.isKeyDown(Keyboard.KEY_A)) {\n\t\tmove(getTransform().getRot().getLeft(), movAmt);\n\t}\n\tif (Keyboard.isKeyDown(Keyboard.KEY_D)) {\n\t\tmove(getTransform().getRot().getRight(), movAmt);\n\t}\n}\n",
              "description": "\nIn this example, the method processInput is given three inputs ('dt', 'float'), and only them. The example code should work correctly and handle mouse input and keyboard input accordingly."
            },
            "name": "processInput",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "c6f42639-3f51-e282-b54e-3dc9b11e7b4b",
            "ancestors": [
              "cb92337b-15a2-4891-1245-00c8e811265c"
            ],
            "type": "function",
            "description": "Updates the position of an object by adding a specified amount to its current position along a given direction, using the transform's `setPos()` method.",
            "params": [
              {
                "name": "dir",
                "type_name": "Vector3f",
                "description": "3D direction in which to move the object, with the magnitude of the movement specified by the `amt` parameter.",
                "complex_type": false
              },
              {
                "name": "amt",
                "type_name": "float",
                "description": "amount of movement along the specified direction, which is added to the current position of the object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Camera3D camera = new Camera3D(90, 16/9, 0.1f, 100);\nVector3f direction = new Vector3f(0, 0, -1); // This is the forward direction of the camera\nfloat amt = 2; // This is how much we want to move in units of meters (or whatever unit we are using)\ncamera.move(direction, amt); // This will move the camera 2 units away from its current position.",
              "description": ""
            },
            "name": "move",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Main.java",
    "path": "src/com/ch/Main.java",
    "content": {
      "structured": {
        "description": "A 3D rendering engine that uses the LWJGL library to handle input, display, and graphics processing. The main function initializes the display, GL context, and sets up the camera and shader programs. The loop function updates the display title, renders the scene, and processes user input using the Camera3D class. The update function updates the camera position and renders the scene again, and the render function draws 3D objects using a shader program.",
        "items": [
          {
            "id": "d68b3898-86d6-b396-534c-e5a9cb73c2c3",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for creating and managing a 3D scene using the Java 3D API. It sets up the display, loads a shader, and creates a camera and world objects. It also defines a loop that updates the scene and renders it to the screen. The update function processes input and updates the position of the camera, while the render function draws the scene using the Model class.",
            "name": "Main",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 123,
            "docLength": null
          },
          {
            "id": "ac77044c-4e2e-248c-f843-432296ca94d2",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Initializes display and GL resources, enters an endless loop to render and handle user input, and exits with a successful status code.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "program's command-line arguments, which are not utilized in this code snippet.",
                "complex_type": false
              }
            ],
            "name": "main",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "fa259d36-8a93-fe95-c74b-1f5997ae2f3e",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Sets up a display mode with a resolution of 1920x1080, creates a GL context with forward compatibility and VSync enabled, and prints the version number of GL using `glGetString()`.",
            "params": [],
            "name": "initDisplay",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "47aebec0-5651-5f93-b442-cbcbab6d49a6",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Initializes the GL context, sets up the camera and shader, loads a texture, and creates a world object.",
            "params": [],
            "name": "initGL",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 41,
            "docLength": null
          },
          {
            "id": "c04fd914-5009-c4b9-f341-06ba7b9d5ac7",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Continuously runs a loop of rendering, updating the display title and clearing the color and depth buffers.",
            "params": [],
            "name": "loop",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "e514135b-6265-179d-5845-657ae5f0ff04",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Updates the position of an entity (`w`) based on input and transform parameters, using the `processInput` method to handle input and the `updatePos` method to set the new position.",
            "params": [
              {
                "name": "dt",
                "type_name": "float",
                "description": "delta time, which is used to update the position of the entity in the world.",
                "complex_type": false
              }
            ],
            "name": "update",
            "location": {
              "start": 108,
              "insert": 108,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "c572084b-85d9-7eb8-8e40-23ff92d0b118",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Renders a 3D model using the provided view and camera matrices. It sets up the necessary uniforms and matrices, and then draws the model using the `draw()` method.",
            "params": [],
            "name": "render",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "51110c78-422d-9c9f-1649-5f0018da2156",
            "ancestors": [
              "d68b3898-86d6-b396-534c-e5a9cb73c2c3"
            ],
            "type": "function",
            "description": "Terminates the Java process with the specified status code.",
            "params": [
              {
                "name": "status",
                "type_name": "int",
                "description": "value to be passed to the `System.exit()` method, which terminates the application's execution.",
                "complex_type": false
              }
            ],
            "name": "exit",
            "location": {
              "start": 134,
              "insert": 134,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "SimplexNoise.java",
    "path": "src/com/ch/SimplexNoise.java",
    "content": {
      "structured": {
        "description": "A simplex algorithm for computing the gradient of a function at a given point. The algorithm uses a 5-point simplex to approximate the gradient, which is computed using the dot product of the gradients of the function at the corners of the simplex with the coordinates of the point. The gradients are calculated using the `grad4` array, which contains the gradients of the function at various points in 4D space. The algorithm returns a value between -1 and 1 that represents the gradient of the function at the given point.",
        "items": [
          {
            "id": "089982ae-90dc-64a1-5645-b921f45faf9b",
            "ancestors": [],
            "type": "function",
            "description": "Is an implementation of the Simplex Noise algorithm, which is a mathematical formula used to generate random numbers that have a repeating pattern. The class provides a simple way to calculate the noise value at a given position in a 3D space using the coordinates of the position and a set of integers (perm). The noise values are calculated using the dot product of the gradient vector at each corner of the simplex with the gradient vector at the current position, scaled by the distance between the current position and each corner. The result is a value between -1 and 1 that can be used to add randomness to a 3D model or other application.",
            "name": "SimplexNoise",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 307,
            "docLength": null
          },
          {
            "id": "21d5ba45-4414-42bc-6b48-2f44d03fbf67",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Calculates the nearest integer to a given double value, returning it as an int. If the input is positive, it returns the exact integer value. Otherwise, it returns the integer value one less than the exact value.",
            "params": [
              {
                "name": "x",
                "type_name": "double",
                "description": "double value that is to be rounded to the nearest integer using the provided rounding logic.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an integer that represents the nearest integer to the given double value.",
              "complex_type": false
            },
            "name": "fastfloor",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4d7d7a9d-78f1-6a97-4d4e-e9f987b5cdcb",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Generates a noise value based on a 3D simplex noise algorithm, taking inputs `xin` and `yin` and returning a value within [-1,1]. The function calculates the contributions from three corners of a simplex and scales them to produce the final noise value.",
            "params": [
              {
                "name": "xin",
                "type_name": "double",
                "description": "2D distance from the origin of the simplex cell in the x-direction.",
                "complex_type": false
              },
              {
                "name": "yin",
                "type_name": "double",
                "description": "2D gradient value at the current position.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scaled noise value between -1 and 1.",
              "complex_type": false
            },
            "name": "noise",
            "location": {
              "start": 53,
              "insert": 53,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 54,
            "docLength": null
          },
          {
            "id": "6c199bb5-8ca2-2ab7-c840-cdb60b5a0436",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Generates a noise value for a given point in a 3D space based on the coordinates of four simplex corners and their hashed gradient indices. The output is a scaled value within [-1,1].",
            "params": [
              {
                "name": "xin",
                "type_name": "double",
                "description": "3D coordinates of the point in space where the noise is being calculated.",
                "complex_type": false
              },
              {
                "name": "yin",
                "type_name": "double",
                "description": "2D Y coordinate of the point where noise is being generated.",
                "complex_type": false
              },
              {
                "name": "zin",
                "type_name": "double",
                "description": "3D noise simulation's third dimension, specifically the z-coordinate of the point being simulated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scaled noise value between [-1, 1], calculated based on the distances from a point to four simplex corners.",
              "complex_type": false
            },
            "name": "noise",
            "location": {
              "start": 108,
              "insert": 108,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 81,
            "docLength": null
          },
          {
            "id": "25984e2a-472b-83ad-8d45-9b09304bb7da",
            "ancestors": [
              "089982ae-90dc-64a1-5645-b921f45faf9b"
            ],
            "type": "function",
            "description": "Computes a noise signal based on the Gradient Descent algorithm, which creates a random-like signal by iteratively adjusting the positions of five simplex corners and calculating their contributions to the overall noise signal.",
            "params": [
              {
                "name": "x",
                "type_name": "double",
                "description": "0-based indexing of the simplex corner being evaluated, and is used to compute the appropriate offset for each coordinate of the simplex corners.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "double",
                "description": "2nd coordinate of the point being computed, which is used in the calculation of the contribution from each simplex corner and the final result.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "double",
                "description": "3D gradient vector at the current position, which is used to compute the contribution from each of the five simplex corners in the hashed gradient calculation.",
                "complex_type": false
              },
              {
                "name": "w",
                "type_name": "double",
                "description": "4th coordinate of the point being evaluated, which is used to calculate the gradient of the function at that point.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a scalar value between -1 and 1, representing the gradient noise at a given position.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Noise {\n    public static double noise(double x, double y) {\n        int i = (int) Math.floor(x);\n        int j = (int) Math.floor(y);\n        int gi00 = perm[i & 255] + (j & 255) * 512;\n        int gi01 = perm[(i + 1) & 255] + (j & 255) * 512;\n        int gi10 = perm[i & 255] + ((j + 1) & 255) * 512;\n        int gi11 = perm[(i + 1) & 255] + ((j + 1) & 255) * 512;\n        double t00 = 0.6 - x * x - y * y;\n        if (t00 < 0) return 0.0;\n        double t10 = 0.6 - (x + 1) * (x + 1) - y * *;\n        if (t10 < 0) return 0.0;\n        double t01 = 0.6 - x * x - (y + 1) * (y + 1);\n        if (t01 < 0) return 0.0;\n        double t11 = 0.6 - (x + 1) * (x + 1) - (y + 1) * (y + 1);\n        if (t11 < 0) return 0.0;\n        double t00 = t00 * t00;\n        double n00 = dot(grad4[gi00], x, y);\n        double t01 = t00 * t01;\n        double n01 = dot(grad4[gi01], x, y + 1);\n        double t10 = t00 * t10;\n        double n10 = dot(grad4[gi10], x + 1, y);\n        double t11 = t00 * t11;\n        double n11 = dot(grad4[gi11], x + 1, y + 1);\n        return 27.0 * (n00 + n01 + n10 + n11);\n    }\n}\n",
              "description": "\nThe following is the example output:  \n"
            },
            "name": "noise",
            "location": {
              "start": 190,
              "insert": 190,
              "offset": "\t",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 119,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Texture.java",
    "path": "src/com/ch/Texture.java",
    "content": {
      "structured": {
        "description": "A `Texture` class that loads and manages textures for use in an OpenGL context. It provides a constructor to load a texture from a file, and methods to bind and unbind the texture from the GPU. Additionally, it provides a method to get the ID of the loaded texture. The code uses the `GL` package for OpenGL functionality and the `Util` class for utility functions.",
        "items": [
          {
            "id": "6ff6a497-1fd4-d284-d441-fda279eb9d49",
            "ancestors": [],
            "type": "function",
            "description": "Is used to handle textures in a 3D graphics application. It allows for loading and binding textures, as well as getting the ID of the loaded texture. The loadTexture method takes a file path as an argument and returns the ID of the loaded texture.",
            "name": "Texture",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 75,
            "docLength": null
          },
          {
            "id": "e65c2536-ca2e-0780-2c4c-5ff2a0843b32",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "0 is called and performs an action related to binding.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void bind() {\n\t\tbind(0);\n\t}\n",
              "description": "\nThis example shows that the user can call the method bind with no arguments, in which case it will bind the texture to slot 0. The user could also pass an argument to bind a different slot number, for instance:\n"
            },
            "name": "bind",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0958d7d6-b505-b1bb-d74e-ad9dbfeebd8e",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Sets the active texture slot in the GPU to a specified index within a range of 0 to 31, binding a texture to that slot.",
            "params": [
              {
                "name": "samplerSlot",
                "type_name": "int",
                "description": "0-based index of a texture slot within the current active texture unit, ranging from 0 to 31.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "int samplerSlot = 0;\ntexture.bind(samplerSlot);\n",
              "description": "\nIn this case, the method bind is being called with one parameter \"samplerSlot\" and it's value is set to 0. The method will then use the id of the texture object and call glActiveTexture with GL_TEXTURE0 + samplerSlot, where GL_TEXTURE0 is a constant that specifies the first texture unit, and samplerSlot is an integer representing which texture unit we want to bind this texture to. Then it will call glBindTexture with the GL_TEXTURE_2D target, id of the texture object, and finally it will set the minification filter using GL14.GL_LINEAR_MIPMAP_LINEAR, and the LOD bias using -0.6f."
            },
            "name": "bind",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "8c47013a-ab9f-e2b7-1849-9fdddc1c895c",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Retrieves and returns the value of a field called `id`.",
            "params": [],
            "returns": {
              "type_name": "int",
              "description": "an integer representing the ID of the object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Texture texture = new Texture(\"texture.png\");\nint id = texture.getID();\n",
              "description": "\nThis piece of code creates a new instance of the class Texture and loads it with the file \"texture.png\". Then, the id variable is assigned to the return value of getID(), which returns the id of the loaded texture."
            },
            "name": "getID",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "441a12a5-5634-87a5-2a47-26a83fca73e1",
            "ancestors": [
              "6ff6a497-1fd4-d284-d441-fda279eb9d49"
            ],
            "type": "function",
            "description": "Loads a 2D texture from a file, generates mipmaps, and returns the ID of the created texture.",
            "params": [
              {
                "name": "fileName",
                "type_name": "String",
                "description": "file path of the texture to load.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an integer identifier of a generated texture.\n\n* The output is an integer, which represents the ID of the generated texture.\n* The texture is of type 2D and has an RGBA8 internal format.\n* The texture size is specified by the width and height parameters, which are obtained from the input file name.\n* The texture has a linear filter and is repeat-enabled in both the x and y directions.\n* A mipmap is generated using the `GLGenerateMipmap` function.",
              "complex_type": true
            },
            "name": "loadTexture",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 48,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Timer.java",
    "path": "src/com/ch/Timer.java",
    "content": {
      "structured": {
        "description": "A `Timer` class with various methods for tracking and updating frames per second (FPS) and time. The `init()` method initializes the timer by taking a base measurement of time, while the `update()` method updates the FPS and time measurements using the `getTimeS()` method, which returns the current time in milliseconds. The `calculateDelta()` method calculates the delta time between two frames, and the `updateFPS()` method updates the FPS counter based on the delta time. Finally, the `getDelta()`, `getFPS()`, and `getTime()` methods provide access to the calculated values for later use.",
        "items": [
          {
            "id": "23ea2009-b76c-c182-ac4d-11784addafb3",
            "ancestors": [],
            "type": "function",
            "description": "Is a utility class that provides functions for measuring and updating frames per second (FPS). The class has several static methods, including `init()`, `calculateDelta()`, `updateFPS()`, `getDelta()`, `getFPS()`, and `getTime()`. These methods calculate the current FPS, delta time, and elapsed time, respectively. The class also includes a `update()` method that updates the FPS and delta time values.",
            "name": "Timer",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 53,
            "docLength": null
          },
          {
            "id": "388695ea-3003-c8ab-4c49-4a541f6686a5",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Calculates the current time in milliseconds, taking into account the resolution of the system's timer.",
            "params": [],
            "returns": {
              "type_name": "long",
              "description": "a long value representing milliseconds since the epoch.",
              "complex_type": false
            },
            "name": "getTimeS",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "04df1235-e8ec-e5ac-5e42-1f1bf611c73e",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Sets the value of `lastFPS` to the current time.",
            "params": [],
            "name": "init",
            "location": {
              "start": 18,
              "insert": 18,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9420065a-c3bc-e5a2-ac41-05bd45df06d0",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Calculates the time elapsed since a previous frame was rendered, returning the delta time as a float value.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the time difference between two frames.",
              "complex_type": false
            },
            "name": "calculateDelta",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "0ae3c971-3abf-7580-f34a-9da75abdc087",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Updates the frame rate by incrementing `currentFPS`, resets `fps` to zero, and updates `lastFPS` with a delay of 1 second.",
            "params": [],
            "name": "updateFPS",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "daaf9bb5-4c8e-e48f-1d4e-c5aaedd61867",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Returns the value of the `delta` field, which is a floating-point number.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the difference between two values.",
              "complex_type": false
            },
            "name": "getDelta",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a40a2c78-5922-e494-3444-55f94df62703",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Returns the current frame rate as a floating-point number.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the current frame rate of the application, represented as a floating-point number.",
              "complex_type": false
            },
            "name": "getFPS",
            "location": {
              "start": 42,
              "insert": 42,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9cc3133e-264d-348c-c849-9c8a1fbb394b",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Returns the current system time as a floating-point value.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point representation of time.",
              "complex_type": false
            },
            "name": "getTime",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c69a870f-2405-4c88-4348-c4e1671ad022",
            "ancestors": [
              "23ea2009-b76c-c182-ac4d-11784addafb3"
            ],
            "type": "function",
            "description": "Updates the frame rate, calculates and stores the time elapsed since the last update in milliseconds, and limits the value to a range of 0 to 1.",
            "params": [],
            "name": "update",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Transform.java",
    "path": "src/com/ch/Transform.java",
    "content": {
      "structured": {
        "description": "A `Transform` class that represents a transformation in 3D space. It has several methods for rotating and scaling an object, as well as updating its position based on previous positions and rotations. The class also provides a getTransformation method to return the current transformation matrix, and a setParent method to set the parent transform.",
        "items": [
          {
            "id": "0e69308f-aec7-4893-1348-35948de55f33",
            "ancestors": [],
            "type": "function",
            "description": "Is a flexible representation of a 3D object's position, rotation, and scale. It has an inheritance hierarchy with a parent transform, which allows for a tree-like structure of transforms. The class has methods for rotating, looking at a point, and updating its transformation matrix, as well as getting/setting the position, rotation, and scale. It also has a high-level update method that checks for changes in the transform and updates the necessary fields accordingly.",
            "name": "Transform",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 131,
            "docLength": null
          },
          {
            "id": "63adea0a-cebc-298b-de40-b62210b41f23",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Updates an object's position, rotation, and scale based on the current values and stores them as old values for future reference.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public void update() {\n\tif (oldPos != null) { // if the old position is not null, we need to check if it has changed since last update\n\t\tif (!oldPos.equals(pos)) { // if the position has changed since last update, we set the old position to the current position\n\t\t\toldPos.set(pos);\n\t\t}\n\t\tif (!oldRot.equals(rot)) { // if the rotation has changed since last update, we set the old rotation to the current rotation\n\t\t\toldRot.set(rot);\n\t\t}\n\t\tif (!oldScale.equals(scale)) { // if the scale has changed since last update, we set the old scale to the current scale\n\t\t\toldScale.set(scale);\n\t\t}\n\t} else { // if the old position is null, we create new objects for each of them and set them to the current values\n\t\toldPos = new Vector3f().set(pos);\n\t\toldRot = new Quaternion().set(rot);\n\t\toldScale = new Vector3f().set(scale);\n\t}\n}\n",
              "description": ""
            },
            "name": "update",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "267357a8-1afa-db89-f947-270f63342ff6",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Multiplies a quaternion representing a rotation axis by a scalar angle and returns the resulting normalized quaternion.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D rotation axis around which the rotation will be performed.",
                "complex_type": false
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle around the axis specified by the `axis` parameter.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f axis = new Vector3f(0, 1, 0); // The vector (0, 1, 0) represents the Y-axis\nfloat angle = 90.0F; // Rotate by 90 degrees\n\nTransform transform = new Transform();\ntransform.rotate(axis, angle);\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "eea9b9ff-e106-d1a7-c74c-b479729ee926",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Computes the rotation required to face a given point while maintaining a specified up vector.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D position that the agent should look at.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction that the model should face after rotating around the specified `point`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Transform transform = new Transform();\n        Vector3f point = new Vector3f(0, 1, 0);\n        Vector3f up = new Vector3f(0, 0, 1);\n        transform.lookAt(point, up);\n    }\n}\n",
              "description": ""
            },
            "name": "lookAt",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "12177d4c-c194-1880-404f-982cb7c9d329",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Calculates a quaternion representing the rotation necessary to look at a point from a specific direction. It takes two vectors as input: `point` represents the point to look at, and `up` represents the direction of the view. The function returns a quaternion that rotates the object in the specified direction to face the given point.",
            "params": [
              {
                "name": "point",
                "type_name": "Vector3f",
                "description": "3D point of interest around which the look-at rotation is to be computed.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D vector that defines the orientation of the look-at axis.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion representation of the rotation required to face a specified point in space while maintaining a fixed orientation with respect to a provided up vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform(); // Creating a new transform object. \nVector3f targetPos = new Vector3f(1, 0, 0); // Setting the target position to (1, 0, 0) from (0, 0, 0). \nVector3f upVector = new Vector3f(0, 1, 0); // Setting the up vector to (0, 1, 0) from (0, 0, 0). \ntransform.lookAt(targetPos, upVector); \nQuaternion rot = transform.getLookAtRotation(targetPos, upVector); // Retrieving the rotation of the object at this target position. \n",
              "description": ""
            },
            "name": "getLookAtRotation",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6e30cda5-4223-08aa-2144-b802fc745582",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Checks if an object's properties have changed by comparing them to their previous values. If any property has changed, the function returns `true`. Otherwise, it returns `false`.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the object has changed.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(1, 2, 3));\ntransform.setRot(new Quaternion(0, 1, 0, 0));\ntransform.setScale(new Vector3f(2, 2, 2));\ntransform.update();\nSystem.out.println(transform.hasChanged()); // true\n",
              "description": "\nThe example code creates a new Transform object and sets its position, rotation, and scale using the setPos, setRot, and setScale methods. It then calls the update method to update the old variables with the current ones. Finally, it checks if the transform has changed by calling the hasChanged method, which returns true since the position, rotation, and scale have been updated."
            },
            "name": "hasChanged",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 15,
            "docLength": null
          },
          {
            "id": "2badb936-8a76-509d-5d47-e9d37acd4baa",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Computes a transformation matrix based on position, rotation, and scale values, and returns it as a Matrix4f object.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a transformed matrix representing the combination of translation, rotation, and scaling.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform myObject = new Transform();\n// Set position, rotation, and scale of the object\nmyObject.setPos(new Vector3f(10, 5, -3));\nmyObject.setRot(new Quaternion(1, 0, 0, 0));\nmyObject.setScale(new Vector3f(2, 2, 2));\n// Get the transformation matrix of the object\nMatrix4f myTransformation = myObject.getTransformation();\n",
              "description": "\nIn this example, we create a new transform object and set its position, rotation, and scale using the setter methods provided by the class. We then retrieve the transformation matrix of the object using the getTransformation method and store it in the myTransformation variable. The transformation matrix is calculated based on the position, rotation, and scale of the object, as well as the parent matrix if applicable."
            },
            "name": "getTransformation",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "7d93b10b-8c65-b7bf-c44e-db8ba9167507",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Retrieves and returns the transformation matrix of the parent node in a hierarchical tree structure, taking into account any changes made to the parent node's transformation.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the parent transformation matrix.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nchild.setParent(parent);\nchild.update();\nchild.getTransformation();\n",
              "description": "\nIn this example, we first create a `Transform` object named \"child\" and set its parent to the parent `Transform`. We then update the child `Transform` by calling the `update()` method, which updates its position, rotation, and scale based on its parent's transformation matrix. Finally, we call the `getTransformation()` method on the child `Transform` to retrieve its transformation matrix, which includes the parent's transformation matrix as well as the child's own position, rotation, and scale transformations."
            },
            "name": "getParentMatrix",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "5f4ec058-52b4-a2bb-664e-e36a0248263a",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Sets the parent transform of an object, storing the new value in the `parent` field.",
            "params": [
              {
                "name": "parent",
                "type_name": "Transform",
                "description": "Transform object that will serve as the new parent of the current Transform object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform child = new Transform();\nTransform parent = new Transform();\nchild.setParent(parent);\n",
              "description": ""
            },
            "name": "setParent",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d41e0603-297a-ea98-6945-68da7d34c6c4",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Takes a `Vector3f` object as input and returns its transformed position after applying a transformation matrix provided by the parent matrix.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a transformed position vector in the form of a `Vector3f`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    private Transform transform;\n    public void myMethod() {\n        Vector3f transformedPos = transform.getTransformedPos();\n    }\n}\n",
              "description": ""
            },
            "name": "getTransformedPos",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "013c1142-64be-17a0-2a42-3f8642b8d17f",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Multiplies a given quaternion `rot` by the parent rotation, which is initially set to the identity quaternion and later updated based on the value of `parent`. The resulting transformed quaternion is returned.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion representing the rotated transformation of the parent object relative to its original rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(0, 0, 0));\ntransform.setRot(new Quaternion(1, 0, 0, 0));\ntransform.setScale(new Vector3f(1, 1, 1));\ntransform.rotate(Vector3f.up(), 90);\nQuaternion q = transform.getTransformedRot();\n",
              "description": ""
            },
            "name": "getTransformedRot",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "4ab2faad-1efb-2f85-d54a-abb847f9a834",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Returns the position of an object as a `Vector3f` structure.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object containing the position of the entity.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "// Get the current position of this transform.\nVector3f pos = myTransform.getPos();\n",
              "description": ""
            },
            "name": "getPos",
            "location": {
              "start": 107,
              "insert": 107,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c3d5b1bb-7e5e-a5bd-c247-54f590b32acc",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Sets the position of an object to a specified Vector3f value.",
            "params": [
              {
                "name": "pos",
                "type_name": "Vector3f",
                "description": "3D position of an object or entity in the function `setPos`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create a Vector3f object to store the new position value\nVector3f pos = new Vector3f(1, 2, 3);\n\n// Set the position of the transform object to the new value\ntransform.setPos(pos);\n",
              "description": "\nIn this example, we first create a `Vector3f` object to store the new position value. We then pass this `Vector3f` object as an argument to the `setPos` method of the `Transform` class, which sets the position of the transform object to the new value."
            },
            "name": "setPos",
            "location": {
              "start": 111,
              "insert": 111,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bfc46089-193c-cba7-ea4e-4dd3587afebe",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Returns a `Quaternion` object representing the rotation of an entity.",
            "params": [],
            "returns": {
              "type_name": "Quaternion",
              "description": "a Quaternion object representing the rotation of the game object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform myTransform = new Transform();\nmyTransform.setPos(new Vector3f(1, 2, 3));\nmyTransform.setRot(new Quaternion(0, 1, 0, 0));\nSystem.out.println(myTransform.getRot()); // output: (0, 1, 0, 0)\n",
              "description": ""
            },
            "name": "getRot",
            "location": {
              "start": 117,
              "insert": 117,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "329cf28f-525f-38b5-3440-91685f672279",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Sets the object's rotation state to the provided `Quaternion` value.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "4D quaternion value that updates the rotational orientation of the object instance being represented by the `this` reference.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\ntransform.setPos(new Vector3f(1, 2, 3));\nQuaternion rotation = new Quaternion(0.5, 0.6, 0.7, 0.8);\ntransform.setRot(rotation);\n",
              "description": ""
            },
            "name": "setRot",
            "location": {
              "start": 121,
              "insert": 121,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "76a1d2df-5d5e-8db8-664d-95cff95e7449",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Returns the current scale value of a `Vector3f` object.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a `Vector3f` object containing the scaling factors for the model.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Transform transform = new Transform();\nVector3f scale = transform.getScale();\n",
              "description": "\nThis example instantiates a Transform object and then retrieves its scale vector using the getScale() method, which returns the scale of the transformation in a Vector3f format."
            },
            "name": "getScale",
            "location": {
              "start": 125,
              "insert": 125,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bde4b62d-962d-0495-7d41-e8e35e03f6f0",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Sets the scale of an object, which affects its size and shape.",
            "params": [
              {
                "name": "scale",
                "type_name": "Vector3f",
                "description": "3D scaling factor for the object being modeled.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Transform transform = new Transform();\n        Vector3f scale = new Vector3f(2, 2, 2);\n        transform.setScale(scale);\n    }\n}\n",
              "description": ""
            },
            "name": "setScale",
            "location": {
              "start": 129,
              "insert": 129,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "76714744-0d40-d087-d94e-4ccaf3fd33b5",
            "ancestors": [
              "0e69308f-aec7-4893-1348-35948de55f33"
            ],
            "type": "function",
            "description": "Returns an empty string for any input.",
            "params": [],
            "returns": {
              "type_name": "empty",
              "description": "an empty string.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tTransform transform = new Transform();\n\t\ttransform.setPos(new Vector3f(1, 2, 3));\n\t\ttransform.setRot(new Quaternion(1, 0, 0, 0));\n\t\ttransform.setScale(new Vector3f(4, 5, 6));\n\t\tSystem.out.println(transform);\n\t}\n}\n",
              "description": "\nThe above code creates a new instance of the Transform class and sets its position, rotation, and scale using the respective setter methods. The `toString` method is then called on the transform object to get a string representation of the object, which is printed to the console."
            },
            "name": "toString",
            "location": {
              "start": 133,
              "insert": 133,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Util.java",
    "path": "src/com/ch/Util.java",
    "content": {
      "structured": {
        "description": "Several static utility methods for working with buffers and lists. Util methods include creating FloatBuffer, IntBuffer, and ByteBuffer objects from arrays of data, as well as flipping and reversing these buffers. Other methods convert lists to arrays or vice versa, depending on the type of elements in question. The code also includes a method for removing empty strings from an array, as well as methods for converting integers, floats, and lists of these types to arrays.",
        "items": [
          {
            "id": "5c367c2d-ca74-f091-4b4b-106f28c4e629",
            "ancestors": [],
            "type": "function",
            "description": "Is a utility class that provides various methods for manipulating arrays of data, including converting between integer, float, and boolean arrays, as well as removing empty strings from an array. It also provides methods for creating and manipulating buffers for storing vertex positions, tangents, and normals in a 3D graphics context. Additionally, it offers methods for creating matrices in 4D space.",
            "name": "Util",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 129,
            "docLength": null
          },
          {
            "id": "f93f808a-a8dd-6898-d94b-eae52f187ae8",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Creates a new FloatBuffer object with the specified size.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "number of elements to be stored in the FloatBuffer.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "FloatBuffer",
              "description": "a FloatBuffer object of specified size, created using `BufferUtils`.",
              "complex_type": false
            },
            "name": "createFloatBuffer",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c8745d07-8b49-2cbe-364d-407311e611c4",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Creates an `IntBuffer` instance with the specified size using `BufferUtils`.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "integer capacity of the IntBuffer to be created, which determines the number of elements that can be stored in the buffer.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "IntBuffer",
              "description": "an `IntBuffer` object that represents a buffer of integers with the specified size.",
              "complex_type": false
            },
            "name": "createIntBuffer",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "42df1ba6-3761-5f86-764c-7853d61f7f36",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Creates a new byte buffer with the specified size using the `BufferUtils` class.",
            "params": [
              {
                "name": "size",
                "type_name": "int",
                "description": "desired capacity of the byte buffer to be created, which is used by the `BufferUtils.createByteBuffer()` method to determine the appropriate buffer size and allocate memory for it.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ByteBuffer",
              "description": "a non-null `ByteBuffer` instance of the specified size.",
              "complex_type": false
            },
            "name": "createByteBuffer",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7996afbd-4fac-b483-b343-bfafa0e8465a",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Creates an `IntBuffer` object from a provided array of integers, puts the values into the buffer, and flips the buffer for efficient access.",
            "params": [],
            "returns": {
              "type_name": "IntBuffer",
              "description": "an flipped `IntBuffer` containing the provided values.",
              "complex_type": false
            },
            "name": "createFlippedBuffer",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "60265845-eb96-e8a6-b24a-a7f4eef5fd8c",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Creates a new `FloatBuffer` object and populates it with the specified `float` values, then flips the buffer to position the first element at the beginning. It returns the flipped buffer.",
            "params": [],
            "returns": {
              "type_name": "FloatBuffer",
              "description": "a flipped FloatBuffer containing the input values.",
              "complex_type": false
            },
            "name": "createFlippedBuffer",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bcbc33d6-8cd4-19b8-014d-c1006a028fe9",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Removes empty strings from an array of strings, returning a new array with non-empty strings.",
            "params": [
              {
                "name": "data",
                "type_name": "String[]",
                "description": "0-length array of strings that are to be filtered for empty strings.\n\n* Length: `data.length`\n* Elements: The array contains multiple strings\n* Properties of individual elements: Each element is a string that may or may not be empty",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a new array of non-empty strings, containing all the elements from the original array that are not empty.",
              "complex_type": false
            },
            "name": "removeEmptyStrings",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 12,
            "docLength": null
          },
          {
            "id": "d2ce4fd9-0b0d-cda2-e749-a8b900044ba6",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Transforms an array of integers into an integer array with the same length, by simply copying the elements of the input array to the output array.",
            "params": [
              {
                "name": "data",
                "type_name": "Integer[]",
                "description": "1D array of integers that is converted to a 1D integer array by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "an int array with the same length as the input `data` array, containing the corresponding integer values.",
              "complex_type": false
            },
            "name": "toIntArray",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "be589def-b094-d780-7548-4f4973981022",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Converts a `List<Integer>` to an `int[]` array, copying the values of the list into the array.",
            "params": [
              {
                "name": "data",
                "type_name": "List<Integer>",
                "description": "list of integers to be converted into an integer array.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "integer",
              "description": "an int array containing the elements of the input list.",
              "complex_type": false
            },
            "name": "toIntArray",
            "location": {
              "start": 113,
              "insert": 113,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "2ed92358-1066-c2be-da47-f298a03102d7",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Takes a `Float[]` array as input and returns a new `float[]` array with the same elements.",
            "params": [
              {
                "name": "data",
                "type_name": "Float[]",
                "description": "0-based array of floating-point numbers that will be converted into a new 0-based array of floating-point numbers.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "an array of `float` values containing the same elements as the input `Float[]` array.",
              "complex_type": false
            },
            "name": "toFloatArray",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          },
          {
            "id": "4c3bbbff-98b4-7c96-1f4f-4de608920734",
            "ancestors": [
              "5c367c2d-ca74-f091-4b4b-106f28c4e629"
            ],
            "type": "function",
            "description": "Converts a list of floating-point numbers to an array of the same size, with each element corresponding to the value in the input list.",
            "params": [
              {
                "name": "data",
                "type_name": "List<Float>",
                "description": "list of floating-point numbers that will be converted into an array of floats by the `toFloatArray()` method.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "an array of `float` values equal to the size of the input `List<Float>` containing the corresponding floating-point numbers.",
              "complex_type": false
            },
            "name": "toFloatArray",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Matrix4f.java",
    "path": "src/com/ch/math/Matrix4f.java",
    "content": {
      "structured": {
        "description": "A Matrix4f class that represents a 4x4 matrix in homogeneous coordinates. The class provides various methods for creating and manipulating matrices, including initIdentity(), initRotation(), initOrthographic(), and mul() for multiplying the matrix with another vector or matrix. Additionally, the class provides getData() and getLinearData() methods to access the matrix data, as well as setM() method to set the matrix data directly.",
        "items": [
          {
            "id": "f67ebc32-c212-9786-d840-a66039043ab0",
            "ancestors": [],
            "type": "function",
            "description": "Is a data structure for representing 4x4 matrices. It provides methods for initializing the matrix with rotation and translation vectors, as well as methods for transforming vectors and other matrices. The class also provides access to the linear data of the matrix through its `getLinearData()` method.",
            "name": "Matrix4f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 291,
            "docLength": null
          },
          {
            "id": "bab51320-d6ae-d889-9948-5b30533bad08",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets all elements of a `Matrix4f` object to identity values, i.e., matrix with diagonal elements equal to 1 and off-diagonal elements equal to 0.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a matrix with all elements set to either 0 or 1, depending on their position in the matrix.\n\nThe `Matrix4f` object is initialized with identity matrix elements. Specifically, each element in the 16-element array is set to either 0 or 1, depending on its row and column index. The resulting matrix has a determinant of 1 and is equivalent to the identity matrix.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f matrix = new Matrix4f();\n        matrix.initIdentity();\n        System.out.println(matrix);\n    }\n}\n",
              "description": "\nThis code will print out the following:\n"
            },
            "name": "initIdentity",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "9e289a1e-c9a8-3498-864e-1e9a0f3922bb",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix with translation values `x`, `y`, and `z`. It sets the elements of the matrix to represent the position of an object in 3D space after translation.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D translation amount in the x-axis direction, which is negated before being assigned to the matrix data.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd translation component, which is added to the `data` array at index 1.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd dimension of the matrix, which is translated by the value provided.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a modified instance of the `Matrix4f` class.\n\n* The returned object is a `Matrix4f` instance, representing a 4x4 homogeneous transformation matrix.\n* The matrix elements are updated to reflect the translation vector (x, y, z) from the origin. Specifically, the first column represents the x-component of the translation, the second column represents the y-component, and the third column represents the z-component.\n* The returned object retains the same properties as the original matrix, including its homogeneity and 4x4 structure.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Matrix4f matrix = new Matrix4f();\n    matrix.initTranslation(1, 2, 3);\n    float[][] data = matrix.getData();\n    System.out.println(data[0][3]);\n  }\n}\n",
              "description": "\nThis program will print out the value of the translation component on the X axis."
            },
            "name": "initTranslation",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 21,
            "docLength": null
          },
          {
            "id": "b2714cbf-168c-a980-7f40-6e87cc8359ac",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a rotation matrix based on three Euler angles (x, y, z). It returns the rotation matrix as a new object instance.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D rotation angle around the z-axis, which is used to calculate the rotation matrix rz.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D rotation axis around which the 3D rotation is performed, and it is used to calculate the rotation matrix using the rotation angles provided by the other two input parameters.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D rotation axis around which the rotation is performed, and it is used to compute the rotations of the `rx`, `ry`, and `rz` matrices.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a `Matrix4f` object containing the rotation matrix based on the given Euler angles.\n\n* The `data` field is a 4x4 matrix representing the rotated coordinate system.\n* The elements of the matrix are floating-point values representing the individual components of the rotation.\n* The rotation is represented by three Euler angles (x, y, z) and their corresponding quaternion representations (rz, ry, rx).\n* The quaternions are multiplied together to form the final rotated coordinate system.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    public static void main(String[] args) {\n        // create a new matrix4f with an identity matrix\n        Matrix4f m = new Matrix4f();\n        \n        // rotate the matrix around the x-axis by 30 degrees, y-axis by 20 degrees and z-axis by 10 degrees\n        m.initRotation(30, 20, 10);\n    }\n}\n",
              "description": "\nHere is an explanation of what each line does:\n\n* The Matrix4f class is instantiated with the default constructor.\n* A call to initRotation method is made on the matrix object created by the previous step. This method takes three floating point arguments representing the x, y and z axes respectively. These arguments represent the degrees by which the matrix should rotate around each of these axis. \n\nThe rotation occurs in a right-handed coordinate system where the x-axis points to the right, the y-axis points upwards and the z-axis points backwards."
            },
            "name": "initRotation",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 64,
            "docLength": null
          },
          {
            "id": "685ad490-1c09-75a1-054c-3b8a5c5b911d",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix with scaled values for the x, y, and z axes, returning the modified matrix instance.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D scale factor along the x-axis of the matrix.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D scaling factor for the matrix in the `initScale()` function.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3rd component of the scaling vector, which when multiplied with the matrix's elements, scales the matrix by the corresponding factor in the x, y, and z directions.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to the original matrix.\n\n1. The matrix is a 4x4 identity matrix with all elements set to zero except for the top-left element, which is equal to the input parameter `x`.\n2. The matrix has been transformed by scaling along the x-axis by the factor `x`, while keeping the other axes unchanged.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f().initScale(2, 3, 1);\n",
              "description": "\nIn this case, the matrix m will be initialized to a scale matrix that scales all three axes by 2, 3 and 1 respectively."
            },
            "name": "initScale",
            "location": {
              "start": 119,
              "insert": 119,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "aa0ac889-e4cc-f586-9c47-569550e3e393",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix for perspective projection, calculating the necessary values based on the provided field of view (fov), aspect ratio, near and far distances.",
            "params": [
              {
                "name": "fov",
                "type_name": "float",
                "description": "field of view (FOV) of the camera, which determines the angle of the horizontal visual FOV.",
                "complex_type": false
              },
              {
                "name": "aspectRatio",
                "type_name": "float",
                "description": "2D screen aspect ratio of the viewport, which is used to scale the near and far clipping planes along the x-axis to maintain the proper perspective in the resulting matrix.",
                "complex_type": false
              },
              {
                "name": "zNear",
                "type_name": "float",
                "description": "near clipping plane distance in the perspective projection matrix.",
                "complex_type": false
              },
              {
                "name": "zFar",
                "type_name": "float",
                "description": "4th coordinate of the 4D vector returned by the `initPerspective` function, which is the farthest point from the origin that the perspective projection extends to.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to a matrix object containing the perspective projection parameters.\n\n* The data array `data` has 16 elements, with each element representing a component of the perspective projection matrix.\n* The elements of the array are initialized with values that depend on the input parameters, specifically the field of view (fov), aspect ratio, near and far distances, and the tan of half of the fov.\n* The returned output is a matrix object that represents the perspective projection matrix, which is used to transform 3D points into screen coordinates in the viewport.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initPerspective(60, 1, 0.1f, 100);\nSystem.out.println(m.getLinearData());\n",
              "description": "\nThe output of this code is:\n"
            },
            "name": "initPerspective",
            "location": {
              "start": 140,
              "insert": 140,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 23,
            "docLength": null
          },
          {
            "id": "99e252ec-15e6-b982-ba41-c23b67ccc05d",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a matrix for an orthographic projection, where the near and far planes are set to specified values, and the width, height, and depth of the image are calculated based on the aspect ratio of the near plane.",
            "params": [
              {
                "name": "left",
                "type_name": "float",
                "description": "3D coordinate of the left edge of the orthographic projection, which determines the position of the origin of the projection.",
                "complex_type": false
              },
              {
                "name": "right",
                "type_name": "float",
                "description": "right edge of the orthographic projection, which is used to calculate the values for the matrix's elements.",
                "complex_type": false
              },
              {
                "name": "bottom",
                "type_name": "float",
                "description": "2D coordinate of the bottom-left corner of the orthographic projection's viewport.",
                "complex_type": false
              },
              {
                "name": "top",
                "type_name": "float",
                "description": "2D coordinate of the top edge of the orthographic projection, which is used to calculate the corresponding vertex position in the output matrix.",
                "complex_type": false
              },
              {
                "name": "near",
                "type_name": "float",
                "description": "near plane of the orthographic projection, which determines the distance from the viewer at which objects appear to be in focus.",
                "complex_type": false
              },
              {
                "name": "far",
                "type_name": "float",
                "description": "3D far plane distance, which is used to compute the inverse perspective matrix elements for depth and near-far separation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a reference to the original Matrix4f object.\n\n* The matrix's data array `data` has 16 elements, representing the 4x4 orthographic projection matrix.\n* Each element in the array is a float value between 0 and 1, representing the matrix coefficients.\n* The matrix preserves the identity transformation for points within the near and far clipping planes.\n* The near and far clipping planes are defined by the `near` and `far` parameters passed to the function, respectively.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "float left = -1;\nfloat right = 1;\nfloat bottom = -1;\nfloat top = 1;\nfloat near = 0;\nfloat far = 2;\nMatrix4f ortho = new Matrix4f();\northo.initOrthographic(left, right, bottom, top, near, far);\n",
              "description": "\nThe left and right values are the min/max x values of the clipping plane (which are the same). The bottom and top values are the min/max y values of the clipping plane (which are the same). The near value is the distance from the camera to the clipping plane, and the far value is the distance from the camera to the end of the clipping plane. These numbers are all used to calculate a 4x4 matrix that represents an orthographic projection."
            },
            "name": "initOrthographic",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "f0547ab8-316c-11ba-3f4f-be56ca8139ea",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Computes a rotation matrix based on three input vectors: `forward`, `up`, and `r`. The rotation is computed by cross-producting `forward` and `up` to obtain the \"forward\" vector, then cross-producting `f` and `r` to obtain the \"right\" vector, finally returning the resulting rotation matrix.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction of the rotation axis.",
                "complex_type": false
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "2D cross product of two vectors and is used to compute the rotation axis.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing a rotation matrix based on the given forward and up vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nVector3f forward = new Vector3f(1, 0, 0);\nVector3f up = new Vector3f(0, 1, 0);\nm.initRotation(forward, up);\n",
              "description": "\nIn this example, a new matrix instance `Matrix4f m` is created and two vector instances `forward` and `up` are created. The method initRotation is then called on the matrix with the arguments `forward` and `up`. The values of these vectors do not matter in this case, as we only want to know how the method works.\n\nThe method initRotation takes two vectors as input: forward and up. It first normalizes them using their normalized() methods. This ensures that these vectors have a length of 1 before being used for the rotation calculation.\n\nNext, the cross product is calculated between the two vectors. This is done using the cross method of the Vector3f class. The resulting vector, which is now perpendicular to both `forward` and `up`, is then normalized again using its normalized() method. This ensures that this vector has a length of 1 as well.\n\nFinally, the three vectors are used to calculate the rotation matrix `m`. To do this, the cross product result is first converted into a quaternion using the toQuat method of the Vector3f class and then the resulting quaternion is used to create a new rotation matrix with the initQuat method. The resulting matrix has all values correctly set for the rotation described by `forward` and `up`.\n\nThe resulting matrix can now be used to rotate objects in 3D space by multiplying it with other matrices or vectors. For example, the following code could be used to rotate a vector `v` around both its x-axis and y-axis by 90 degrees:\n"
            },
            "name": "initRotation",
            "location": {
              "start": 189,
              "insert": 189,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 10,
            "docLength": null
          },
          {
            "id": "c23f48bf-056d-9ba1-7b4a-b90d89dab049",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Initializes a rotation matrix based on three vectors: `forward`, `right`, and `up`. It sets the corresponding elements of the matrix to the dot products of the vectors.",
            "params": [
              {
                "name": "forward",
                "type_name": "Vector3f",
                "description": "3D direction of rotation relative to the origin, which is used to set the corresponding elements of the matrix's data array.\n\n* It is a vector with three components (x, y, and z) representing a direction in 3D space.",
                "complex_type": true
              },
              {
                "name": "up",
                "type_name": "Vector3f",
                "description": "3D direction of upward motion in the rotation, which is used to initialize the Y-axis of the rotation matrix.\n\n* It is a Vector3f object representing the upward direction.\n* Its components are typically non-zero and may vary depending on the context.",
                "complex_type": true
              },
              {
                "name": "right",
                "type_name": "Vector3f",
                "description": "3D right vector of the rotation axis, which is used to initialize the components of the rotation matrix.\n\n* `right` is a vector representing the right-hand coordinate system axis.\n* It has three components: `x`, `y`, and `z`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a Matrix4f object representing the rotation matrix.\n\nThe `Matrix4f` object returned by the function is an instance of the Matrix4f class in Java, representing a 4x4 homogeneous transformation matrix.\nThe elements of the matrix are determined by the input vectors `forward`, `up`, and `right`, which represent the orientation of the rotation axis.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "import com.example.*; // import the Matrix4f class from package \"com.example\"\n\npublic static void main(String[] args) {\n    Vector3f forward = new Vector3f(); // Initialize a forward vector\n    Vector3f up = new Vector3f(); // Initialize an up vector\n    Vector3f right = new Vector3f(); // Initialize a right vector\n    \n    Matrix4f rotationMatrix = new Matrix4f().initRotation(forward, up, right);\n}\n",
              "description": "\nIn this example, we initialize three vectors: forward, up, and right. We then pass them to the initRotation method in the Matrix4f class to get a 4x4 rotation matrix that represents these three vectors. The resulting rotation matrix is stored in a new instance of the Matrix4f class called \"rotationMatrix\".\n\nNote that the input vectors do not have any specific values, they are just initialized with an empty constructor. Also, the example does not handle edge cases such as when forward, up, and right vectors are parallel or anti-parallel to each other."
            },
            "name": "initRotation",
            "location": {
              "start": 200,
              "insert": 200,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 24,
            "docLength": null
          },
          {
            "id": "217853f7-ccac-69a8-2140-2fcfc7258e47",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Takes a `Vector3f` object `r` and returns a new `Vector3f` object with the components multiplied by the corresponding values from an array `data`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be transformed, which is multiplied element-wise with the elements of the `data` array to produce the transformed vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new Vector3f object containing the result of multiplying each element of the input Vector3f by the corresponding element of a given array, followed by addition of the scalars.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vec = new Vector3f(1, 2, 3);\nMatrix4f mat = new Matrix4f();\nmat.initRotation(new Vector3f(0, 0, 1), new Vector3f(0, 1, 0));\nVector3f res = mat.transform(vec);\n",
              "description": "\nThis code would give the value of vec rotated by the matrix mat. In this case, the vector would be transformed to (1, -2, 3) since the rotation is only around the y axis by 90 degrees. The example input is 'r', 'Vector3f'.\nThis code does not test any edge cases or check for invalid inputs. It is also hallucinating incorrect inputs and thus would likely give unexpected results if given incorrect inputs.\nThis method should never be explained in the code, nor should it ever been asked to be written in the first place."
            },
            "name": "transform",
            "location": {
              "start": 225,
              "insert": 225,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f8940832-fe45-a3bc-9a40-37abca30e26e",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Multiplies a matrix by another matrix, element-wise multiplying the corresponding elements of each matrix and storing the result in a new matrix.",
            "params": [
              {
                "name": "r",
                "type_name": "Matrix4f",
                "description": "4x4 matrix that will be multiplied with the current matrix, resulting in a new 4x4 matrix that represents the product of the two matrices.\n\n* It is an instance of the `Matrix4f` class, representing a 4x4 matrix.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a new Matrix4f object containing the result of multiplying the input matrix `r` with the current matrix.\n\nThe `res` variable is initialized as a new `Matrix4f` object to hold the result of the multiplication.\n\nThe multiplication operation is performed element-wise between the elements of the input matrices `data` and `r`. The resulting elements in `res` represent the product of the corresponding elements in `data` and `r`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f a = new Matrix4f();\n        Matrix4f b = new Matrix4f();\n        Matrix4f c = new Matrix4f();\n        \n        // Initialize the matrices for testing purposes\n        a.initRotation(new Vector3f(0, 1, 0), new Vector3f(0, 0, -1));\n        b.initTranslation(new Vector3f(5, 2, -3));\n        \n        // Perform the matrix multiplication using the mul method\n        c = a.mul(b);\n    }\n}\n",
              "description": "\nIn this example, two matrices are created and initialized to be used for testing purposes. The first matrix is initialized to be a rotation matrix around the y-axis by 90 degrees (0, 1, 0), while the second matrix is initialized to be a translation matrix of 5 units in x direction and -3 units in z direction (0, 2, -3).\nUsing these two matrices as input for the method mul, we get the following output:\n"
            },
            "name": "mul",
            "location": {
              "start": 230,
              "insert": 230,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "b5490701-3b4d-77be-7d46-e2da06a636dc",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Generates a 4x4 array of floats, using the values from an array `data`. The returned array is used to store and manipulate data.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of 4x4 floating-point values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initIdentity().translate(new Vector3f(1, 2, 3));\nfloat[][] data = m.getData();\nSystem.out.println(\"data[0][0]: \" + data[0][0]); // prints 1\nSystem.out.println(\"data[1][1]: \" + data[1][1]); // prints 2\nSystem.out.println(\"data[2][2]: \" + data[2][2]); // prints 3\n",
              "description": "\nThis code creates a new matrix and sets its identity, then translates it by the vector (1, 2, 3). Finally, it gets the data of the matrix using getData() method. The resulting float array data is then printed in the console."
            },
            "name": "getData",
            "location": {
              "start": 242,
              "insert": 242,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "c22ec355-92af-1dbf-594d-815b5201f205",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Returns an array of floats containing the values of a linear data set at multiple points.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "an array of 12 floating-point values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Matrix4f {\n\tprivate float[][] data = {{1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}};\n\n    public Matrix4f initIdentity() {\n        return this;\n    }\n\n\tpublic float[] getLinearData() {\n\t\treturn new float[] {\n\t\t\tdata[0][0],\n\t\tdata[1][0],\n\t\t\t\tdata[2][0],\n\t\t\t\tdata[3][0],\n\t\t\t\tdata[0][1],\n\t\t\t\tdata[1][1],\n\t\t\t\tdata[2][1],\n\t\t\t\tdata[3][1],\n\t\t\t\tdata[0][2],\n\t\t\t\tdata[1][2],\n\t\t\t\tdata[2][2],\n\t\t\t\tdata[3][2],\n\t\t\t\tdata[0][3],\n\t\t\t\tdata[1][3],\n\t\t\t\tdata[2][3],\n\t\t\t\tdata[3][3]};\n}\n",
              "description": "\nThe example code should be as short as possible, and the code should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code.\n\nThis is an example on how to use the provided method getLinearData:\n"
            },
            "name": "getLinearData",
            "location": {
              "start": 252,
              "insert": 252,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          },
          {
            "id": "c6eba0c6-0ba4-d584-a04b-6389f84167d8",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Retrieves a value from a two-dimensional array `data`. The value is located at position `(x, y)` and is returned as a float.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "2D coordinates of a point in the data array.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2nd dimension of the data array being accessed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the data at the specified coordinates within a two-dimensional array.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Matrix4f m = new Matrix4f();\n        System.out.println(m.get(0, 0)); // Prints out 1 (the first element of the first row of the matrix)\n    }\n}\n",
              "description": ""
            },
            "name": "get",
            "location": {
              "start": 273,
              "insert": 273,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f565f958-2036-7981-9644-40b629d290d7",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets the value of the member `data` to a provided array of floats.",
            "params": [
              {
                "name": "data",
                "type_name": "float[][]",
                "description": "2D array of float values to be stored as the instance variable `data`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "// Create a new matrix 4f object\nMatrix4f m = new Matrix4f();\n\n// Initialize the matrix with some arbitrary values\nm.set(0, 0, 1);\nm.set(0, 1, 2);\nm.set(0, 2, 3);\nm.set(0, 3, 4);\nm.set(1, 0, 5);\nm.set(1, 1, 6);\nm.set(1, 2, 7);\nm.set(1, 3, 8);\nm.set(2, 0, 9);\nm.set(2, 1, 10);\nm.set(2, 2, 11);\nm.set(2, 3, 12);\nm.set(3, 0, 13);\nm.set(3, 1, 14);\nm.set(3, 2, 15);\nm.set(3, 3, 16);\n\n// Transpose the matrix\nm.transposeSelf();\n",
              "description": ""
            },
            "name": "SetM",
            "location": {
              "start": 277,
              "insert": 277,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "56ae7dc3-56d8-a3b1-7641-c6f4472a795a",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Sets a value for a specific position in a two-dimensional array `data`.",
            "params": [
              {
                "name": "x",
                "type_name": "int",
                "description": "0-based index of the row in the 2D array `data`.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "int",
                "description": "2D array index at which the value `value` is assigned to the corresponding element.",
                "complex_type": false
              },
              {
                "name": "value",
                "type_name": "float",
                "description": "4-byte floating-point number that is assigned to the corresponding element in the 2D array `data`.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.set(1, 0, 1);\n",
              "description": "\nThis would set the first column and row of the matrix to a value of 1, which is what the set method is used for."
            },
            "name": "set",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "279b9fc2-22e9-f29a-3543-d61feb6e7218",
            "ancestors": [
              "f67ebc32-c212-9786-d840-a66039043ab0"
            ],
            "type": "function",
            "description": "Transforms an array of floats `data` into a new array with the same dimensions, where each element is the transpose of its original position.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "Matrix4f m = new Matrix4f();\nm.initIdentity();\nm.transposeSelf(); // identity matrix\n\n// Identity matrix\nSystem.out.println(m);\n/* [ 1  0  0  0 ]\n * [ 0  1  0  0 ]\n * [ 0  0  1  0 ]\n * [ 0  0  0  1 ] */\n",
              "description": "\nThe method transposeSelf changes the matrix to its transposed form, where the rows and columns are swapped. In this example the identity matrix is being transposed to become a diagonal matrix."
            },
            "name": "transposeSelf",
            "location": {
              "start": 285,
              "insert": 285,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Vector2f.java",
    "path": "src/com/ch/math/Vector2f.java",
    "content": {
      "structured": {
        "description": "A `Vector2f` class that represents 2D vectors in Java. It provides various methods for vector operations such as length, max, dot product, normalization, cross product, lerping and rotating the vector. The code also includes some basic vector operations like adding, subtracting, multiplying and dividing by other vectors or scalars. Additionally, it provides a `set()` method to set the vector's x and y components directly, and an `as3DVector()` method to convert the vector to a 3D vector.",
        "items": [
          {
            "id": "573b11f0-dc50-4c98-a749-fd1d622c0a62",
            "ancestors": [],
            "type": "function",
            "description": "Provides various methods and operations for working with 2D vectors. These include calculating the length and magnitude of the vector, finding the maximum value, dot product, cross product, and more. Additionally, it offers methods for adding, subtracting, multiplying, dividing, and normalizing vectors, as well as providing a convenient method for rotating a vector around an axis. The class also provides high-level mathematical operations such as lerping and finding the absolute value of a vector.",
            "name": "Vector2f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 124,
            "docLength": null
          },
          {
            "id": "33992241-1ab6-02b2-7d46-7badd33366f5",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the Euclidean distance of a point in two-dimensional space, as measured from its center, by squaring its coordinates and taking the square root.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the square root of the sum of the squares of the `x` and `y` coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "float length = myVector.length();\n",
              "description": ""
            },
            "name": "length",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f7f51486-5731-03ba-d54d-49f1a8ad92b4",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the maximum value of two arguments, `x` and `y`, using the `Math.max()` method.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the maximum value of `x` and `y`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Vector2fTest {\n\tpublic static void main(String[] args) {\n\t\tVector2f a = new Vector2f(3, 4);\n\t\tVector2f b = new Vector2f(1, 2);\n\t\tfloat maxValue = a.max(); // returns the maximum value between x and y of vector a which is 4\n\t\tSystem.out.println(\"Maximum value: \" + maxValue);\n\t}\n}\n",
              "description": ""
            },
            "name": "max",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "408a81d3-4658-5484-524e-e400aab6b161",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object `r` as input and returns the dot product of its `x` and `y` components with the values of the function's parameters `x` and `y`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be dot-producted with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the dot product of the input vector and another vector represented by `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(10, 15);\nVector2f v2 = new Vector2f(-3, -4);\nfloat dotProduct = v1.dot(v2); // Returns -79.0\n",
              "description": ""
            },
            "name": "dot",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "ff6c874d-1395-c19b-4946-93cadb38adfe",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object and returns a new `Vector2f` object with the x-coordinate normalized to a fixed length and the y-coordinate preserved, scaled by the same factor as the length of the original vector.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a normalized vector in the form of a `Vector2f` instance with magnitude equal to the length of the original vector and direction equal to the original vector's x-coordinate divided by the length, followed by the y-coordinate divided by the length.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3, 4);\nvector.normalize(); // This will return a new vector which has the same direction as vector but with length equal to 1;\n",
              "description": ""
            },
            "name": "normalized",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "6b4bc526-af2d-1f85-b04c-f05f049051f2",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Computes the dot product of two vectors and returns the result as a single scalar value.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that the function operates on, providing the second component of the vector to be multiplied with the `x` component of the function and the first component of the vector to be subtracted from the `y` component of the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the cross product of two vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vec1 = new Vector2f(0, 3);\nVector2f vec2 = new Vector2f(4, 0);\n\nfloat crossProduct = vec1.cross(vec2);\n",
              "description": "\nIn this example, the two vectors vec1 and vec2 are created with x and y components of 0 and 3, respectively. The method cross is then called on vec1 with vec2 as an argument. This will return a float value representing the result of the cross product between the two vectors. In this case, the returned value would be -4."
            },
            "name": "cross",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6f91e218-6b97-8796-5d49-720b2ac2c2fd",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Calculates a linear interpolation between two vector values, `dest` and `this`, based on a provided factor `lerpFactor`. It returns a new vector value by combining the original vectors using the interpolation formula.",
            "params": [
              {
                "name": "dest",
                "type_name": "Vector2f",
                "description": "2D destination point to which the linear interpolation is applied.",
                "complex_type": false
              },
              {
                "name": "lerpFactor",
                "type_name": "float",
                "description": "0 to 1 value that the current vector will be interpolated towards from its current value, with values closer to 0 resulting in more rapid interpolation towards the destination vector and values closer to 1 resulting in more gradual interpolation.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector that interpolates between two given vectors based on a provided factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f point = new Vector2f(1, 2);\nVector2f dest = new Vector2f(3, 4);\nfloat lerpFactor = 0.5;\n\nVector2f result = point.lerp(dest, lerpFactor);\n",
              "description": "\nIn this example, the method lerp is being called on a point object and two float parameters are passed in: dest and lerpFactor. The method then returns a Vector2f object that represents the linear interpolation between point and dest at lerpFactor."
            },
            "name": "lerp",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2c254d20-d8dc-bfb2-3b4f-846ffa4a7a2b",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Rotates a `Vector2f` instance by an angle in radians, returning a new `Vector2f` instance with the rotated coordinates.",
            "params": [
              {
                "name": "angle",
                "type_name": "float",
                "description": "angle of rotation in radians, which is used to calculate the cosine and sine of that angle.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a rotated vector in the x-y plane, where the angle of rotation is specified as a float in radians.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(1, 0); // Create a vector with coordinates (1, 0)\nv.rotate(45); // Rotate the vector by 45 degrees\nSystem.out.println(v.toString()); // Output: (√2/2, √2/2)\n",
              "description": "\nIn this example, we create a vector with coordinates (1, 0) and then rotate it by 45 degrees using the rotate method. The resulting vector has coordinates (√2/2, √2/2), which is the result of rotating the original vector by 45 degrees in a counterclockwise direction."
            },
            "name": "rotate",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "aac81637-fc6d-81af-4b46-97e8fa682a8c",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` object with the sum of the current vector's components and the argument's components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` object representing the sum of the input vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(10, 5);\nVector2f v2 = new Vector2f(5, 7);\n\nv1.add(r).toString(); // Output: (15, 12)\n",
              "description": "\nIn this example, we create two vectors `v1` and `v2`, each with coordinates `(x, y)`. We then use the `add()` method to add `v1` and `v2` together, resulting in a new vector `(15, 12)`. The `toString()` method is used to convert this new vector into a string representation."
            },
            "name": "add",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "83108759-861a-1084-684b-ef1af714ca1c",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Adds a given scalar value to its input vector, returning a new vector with the updated coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "2D vector to be added to the existing vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance with the sum of the input `x` and `y` values and the input `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nfloat r = 5;\nVector2f v2 = v1.add(r); // Creates a new vector with the values (8, 9)\n",
              "description": "\nThis is how you would use the add method to add a single value 'r' to a vector 'v1', resulting in a new vector 'v2'."
            },
            "name": "add",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8e922b91-c510-baaf-684a-c925b20653e8",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Adds two floating-point numbers to a `Vector2f` object, returning a new `Vector2f` instance with the sum of the original object's coordinates and the input values.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinate to add to the current position of the vector.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd component of the resulting vector and combines it with the corresponding component of the original vector to produce the new vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance representing the sum of the input `x` and `y` values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(5, 6);\nVector2f sum = v1.add(v2);\nSystem.out.println(sum); // output is (8, 10)\n",
              "description": ""
            },
            "name": "add",
            "location": {
              "start": 55,
              "insert": 55,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4d173a71-70ac-cf90-db43-98c503d4af0d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` object representing the difference between the current vector's components and those of the provided vector.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that the function will subtract from the input vector `x` and `y`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` instance representing the difference between the input vector and the reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(5, 5);\nVector2f v2 = new Vector2f(-3, -6);\n\nVector2f difference = v1.sub(v2); // returns a Vector2f with x=8 and y=6\n",
              "description": "\nIn this example, we create two `Vector2f` objects `v1` and `v2`. We then use the `sub()` method to find the difference between them, which is stored in a new `Vector2f` object called `difference`. The value of `x` in `difference` is 8, and the value of `y` is 6."
            },
            "name": "sub",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "5db7b58e-cd35-aea5-9741-02f3f96d9c03",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Subtracts a given `r` value from the `x` and `y` components of a `Vector2f` object, returning a new `Vector2f` object with the modified coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "2D vector to subtract from the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the difference between the input `r` and the current position of the vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(5, 10);\nfloat r = 3;\n\nVector2f result = v.sub(r);\n\nSystem.out.println(\"Result: \" + result); // Outputs: Result: (2,7)\n",
              "description": "\nIn this example, the method sub is used to create a new vector that represents the difference between the original vector and the scalar value r. The result of the subtraction is then printed out using the println() method."
            },
            "name": "sub",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "47ade186-f902-1a82-0145-bb1fdf5d4df8",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` object `r` as input and returns a new `Vector2f` object with the product of `x` and `r.getX()` and `y` and `r.getY()`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that is multiplied with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the product of the input vectors' x and y components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector1 = new Vector2f(1, 2);\nVector2f vector2 = new Vector2f(3, 4);\n\nVector2f result = vector1.mul(vector2);\n\nSystem.out.println(\"Result: \" + result.toString()); // Output: Result: (3, 8)\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 67,
              "insert": 67,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "65b05381-0b07-03bb-d64d-587a0b7729c1",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a scalar `r` and returns a new `Vector2f` object with the product of the component values of the original vector multiplied by `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "Scalar value that is multiplied with the `Vector2f` components `x` and `y`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with components scaled by the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tfloat x = 10;\n    float y = 20;\n    Vector2f v = new Vector2f(x, y);\n    System.out.println(\"Vector before multiplication: \" + v);\n    Vector2f result = v.mul(5);\n    System.out.println(\"Vector after multiplication: \" + result);\n}\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8f12cc51-d105-e889-1a4c-0781b9b0aa89",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a `Vector2f` argument `r` and returns a new `Vector2f` instance with the components scaled by the reciprocals of the corresponding values in `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to which the current vector should be divided.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with the same x-coordinate as the original vector, and a y-coordinate that is the reciprocal of the input vector's y-coordinate.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v = new Vector2f(3, 4);\nVector2f r = new Vector2f(1, 2);\nVector2f q = v.div(r);\nSystem.out.println(q); // Output: (3/1, 4/2)\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0198d944-e346-87ac-a54c-a1fc278fa2af",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Takes a single floating-point argument `r` and returns a `Vector2f` object with x and y components scaled by the inverse of `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scale factor for the division operation performed on the `x` and `y` components of the `Vector2f` instance, resulting in a new `Vector2f` instance with the divided values.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with scaled X and Y components proportional to the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(5, 10);\nfloat divisor = 2;\nVector2f result = myVector.div(divisor);\nSystem.out.println(\"myVector / \" + divisor + \" = \" + result);\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 79,
              "insert": 79,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b22afad5-b701-7d9a-234d-9a6d8839d138",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Calculates and returns a new `Vector2f` instance with the absolute values of its `x` and `y` components.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a new `Vector2f` object containing the absolute values of the input vector's `x` and `y` components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(-1, -1);\nmyVector.abs();\n// Output: (1, 1)\n",
              "description": ""
            },
            "name": "abs",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "714a3da8-a49a-5bbf-474d-f3c95d460b8d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Returns a string representation of an object by concatenating its `x` and `y` fields.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of a point in Cartesian coordinates, consisting of two numbers separated by a space.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3,4);\nSystem.out.println(vector.toString()); // Output: (3 4)\n",
              "description": "\nThis example creates a new instance of the Vector2f class and initializes it with the x and y coordinates. It then calls the toString method on the vector object, which returns a string representation of the vector in the format \"x y\". The output is then printed using System.out.println()."
            },
            "name": "toString",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3b0e2622-04b7-48b1-0144-919db4bcab65",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Updates the `x` and `y` fields of the `Vector2f` instance, returning the modified instance for chaining.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinate of the vector's position in the set operation.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2nd component of the `Vector2f` object and assigns it the value passed as argument to update its value.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector2f",
              "description": "a reference to the same `Vector2f` instance with updated `x` and `y` values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Main {\n    public static void main(String[] args) {\n        Vector2f v1 = new Vector2f();\n        v1.set(3.0f, 4.0f);\n        System.out.println(v1); // prints (3.0 4.0)\n    }\n}\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "3011238c-a3f9-98bd-714d-712840b10e20",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the values of the vector to those of the given `Vector2f` reference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector that contains the x and y coordinates to be set for the current vector instance.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a reference to the original vector with its components modified to match those of the provided vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(3, 4);\nVector2f v2 = new Vector2f(5, 6);\nv1.set(v2); // set the coordinates of v1 to those of v2\n",
              "description": "\nIn this example, we first create two vectors v1 and v2 with coordinates (3, 4) and (5, 6), respectively. We then use method set to set the coordinates of v1 to those of v2, so that v1 now has the same coordinates as v2."
            },
            "name": "set",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d3ef3aaf-2b5f-05be-0441-a465422faa10",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Transforms a `Vector2f` instance into a corresponding `Vector3f` instance, adding an extra dimension with a value of 0.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object containing the values `x`, `y`, and `0` for the `z` component.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class TestClass{\n    public static void main(String[] args){\n        Vector2f v1 = new Vector2f(5, 8);\n        Vector3f v2 = v1.as3DVector();\n        System.out.println(\"x: \" + v2.getX() + \", y: \" + v2.getY());\n    }\n}\n",
              "description": ""
            },
            "name": "as3DVector",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f79335ca-dbec-078c-9c49-890dc48eea15",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Retrieves the value of the `x` field, which represents a floating-point number.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a float value representing the variable `x`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3, 4);\nfloat xComponent = vector.getX(); // This will return the value 3\n",
              "description": ""
            },
            "name": "getX",
            "location": {
              "start": 106,
              "insert": 106,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b8379a2b-1c2e-62bd-0c41-6419abbaad2d",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the value of the `x` field of the object to which it belongs.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "float value that will be assigned to the `x` field of the class instance being manipulated by the `setX()` method.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector2f myVector = new Vector2f(1, 0);\nmyVector.setX(2);\nSystem.out.println(myVector); // Output: (2, 0)\n",
              "description": "\nIn this example, we create a new vector with an x-coordinate of 1 and a y-coordinate of 0. We then use the setX method to change the x-coordinate of myVector to 2. Finally, we print out the value of myVector, which should now be (2, 0)."
            },
            "name": "setX",
            "location": {
              "start": 110,
              "insert": 110,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b7a21dbd-a8ef-7886-794e-788dff7c9599",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Retrieves the value of the `y` field, which is a `float`. The function returns the value of `y`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the y-coordinate of the point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(3.0f, 4.0f);\nfloat y = vector.getY();\nSystem.out.println(\"y = \" + y);\n",
              "description": "\nThe code above creates an instance of the Vector2f class and stores it in a variable called `vector`. Then it calls the method `getY()` on the `vector` object, which returns the value of the Y-coordinate of the vector (in this case 4.0f). Finally, the value is printed to the console using the `System.out.println()` method."
            },
            "name": "getY",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9c7d31e1-19ad-19a4-0e4c-75335fe1b1b2",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Sets the value of the `y` field of the current object to the provided floating-point value.",
            "params": [
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of a point in a graphical context, and its value is assigned directly to the `y` field of the object instance being passed to the function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector2f vector = new Vector2f(1, 2);\nvector.setY(3);\nSystem.out.println(vector); // Output: (1 3)\n",
              "description": ""
            },
            "name": "setY",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b622cfc8-01ea-8f81-ea45-c4586c7abf6e",
            "ancestors": [
              "573b11f0-dc50-4c98-a749-fd1d622c0a62"
            ],
            "type": "function",
            "description": "Compares a `Vector2f` object with another `Vector2f` object, returning `true` if both objects have the same x and y coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector2f",
                "description": "2D vector to be compared with the current vector for equality.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the vector's coordinates are equal to those of the provided reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector2f v1 = new Vector2f(5, 7);\nVector2f v2 = new Vector2f(5, 7);\nSystem.out.println(v1.equals(v2)); // prints \"true\"\n",
              "description": ""
            },
            "name": "equals",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Vector3f.java",
    "path": "src/com/ch/math/Vector3f.java",
    "content": {
      "structured": {
        "description": "A class `Vector3f` that represents 3D vectors in mathematics. It provides various methods and operators for manipulating vectors, including adding, subtracting, multiplying, dividing, scaling, normalizing, rotating, and lerping. The class also provides getters and setters for the vector's x, y, and z components, as well as a `toString()` method for converting the vector to a string. Additionally, the code includes several high-level packages, such as `Math` and `Vector2f`, which are used throughout the code for various mathematical operations.",
        "items": [
          {
            "id": "1e8196c2-a20b-5692-f148-e950e0d094f9",
            "ancestors": [],
            "type": "function",
            "description": "Is a representation of a 3D vector with three components (x, y, and z) that can be used to perform mathematical operations such as addition, subtraction, multiplication, and division. It also provides methods for normalizing the vector, rotating it around an axis, and lerping between two vectors. Additionally, it has getters and setters for each component of the vector.",
            "name": "Vector3f",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 184,
            "docLength": null
          },
          {
            "id": "04337b75-3a5e-3098-d345-385c9d36d7b3",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the Euclidean distance of a 3D point from origin using the square root of the sum of its coordinates.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the square root of the sum of the squares of the three cartesian coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat vectorLength = myVector.length();\n",
              "description": "\nIn this example, the method `length()` is called on the object `myVector`, which represents a 3D vector with coordinates (1, 2, 3). The returned value of length, `vectorLength` is then assigned to the variable."
            },
            "name": "length",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e27f0a39-309a-f5b1-a741-dd7d0b1edb33",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Calculates the length of a point in three-dimensional space by squaring the coordinates and summing the results.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a value representing the length of the square of the provided coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(2, 3, 4);\nfloat lengthSquared = myVector.squareLength(); // lengthSquared is now equal to 13\n",
              "description": ""
            },
            "name": "squareLength",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b1a88098-10ce-4b8a-a94b-96f3440a99cf",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes and returns the maximum value of its three arguments, `x`, `y`, and `z`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the maximum of three floating-point values: `x`, `y`, and `z`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(5, 8, 2);\nv1.max(); // Returns the largest value in the vector, which is 8.0f;\n",
              "description": ""
            },
            "name": "max",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b8b33ac2-a4b3-c984-4a4f-4c3896379870",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the dot product of a vector and another vector, returning a scalar value.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that the dot product is being calculated for.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "float",
              "description": "a floating-point number representing the dot product of the input vector and the provided vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(1, 2, 3);\nVector3f v2 = new Vector3f(4, 5, 6);\nSystem.out.println(v1.dot(v2)); // Outputs the dot product of v1 and v2: 1*4 + 2*5 + 3*6 = 32\n",
              "description": ""
            },
            "name": "dot",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1a8a2b8b-a9ac-f0ad-5f46-6ee01488e4ca",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes the cross product of two vectors in 3D space, returning a new vector with the resultant magnitude and direction.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to cross with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the cross product of the input vectors.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(0, 1, 2);\n    Vector3f v2 = new Vector3f(3, 4, 5);\n    Vector3f result = v1.cross(v2);\n    System.out.println(\"The result of the cross product is: \" + result);\n  }\n}\n",
              "description": ""
            },
            "name": "cross",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "df1228dd-a05c-f390-da42-f52275b65133",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Normalizes a vector by dividing its components by their magnitude, resulting in a unitized vector representation.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a normalized version of the input vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nvector.normalize();\n// output will be (0.267261, 0.534523, 0.801784)\n",
              "description": ""
            },
            "name": "normalized",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "41e5a2cc-8bc7-59a9-7e47-76b3132b7d4a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Rotates a vector by an angle around a specified axis, returning the resulting vector.",
            "params": [
              {
                "name": "axis",
                "type_name": "Vector3f",
                "description": "3D rotation axis around which the object is rotated.",
                "complex_type": false
              },
              {
                "name": "angle",
                "type_name": "float",
                "description": "3D rotation angle around the specified `axis`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a rotated version of the input vector, based on the specified axis and angle of rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nQuaternion rotation = Quaternion(0, 0, 0, 0);\nmyVector.rotate(axis, angle)\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "2469da71-2a27-9c86-9243-0c35752526d1",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a quaternion representation of rotation and applies it to a `Vector3f` object, returning the rotated vector.",
            "params": [
              {
                "name": "rotation",
                "type_name": "Quaternion",
                "description": "3D rotation transformation that is applied to the `Vector3f` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector representing the rotated position of the original vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Quaternion rotation = new Quaternion(1f, 0f, 0f, 0f); // create a quaternion\nVector3f vector3f = new Vector3f(5.4f, 2.9f, 7.6f); // create a vector3f\nVector3f rotatedVector3f = vector3f.rotate(rotation); // rotate the vector3f by using the quaternion rotation\n",
              "description": ""
            },
            "name": "rotate",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "bc618731-4026-77b8-2c44-afc3f5ea4adb",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Interpolates between two vectors, `dest` and `this`, based on a lerping factor `lerpFactor`. It returns the resulting vector by subtracting `this`, multiplying by `lerpFactor`, and adding `this` again.",
            "params": [
              {
                "name": "dest",
                "type_name": "Vector3f",
                "description": "3D vector that the function will blend or interpolate between the current vector and.",
                "complex_type": false
              },
              {
                "name": "lerpFactor",
                "type_name": "float",
                "description": "linear interpolation factor used to blend the current vector value with the destination vector value.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector that is a linear interpolation of the `dest` vector and the current vector, with the specified lerp factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f start = new Vector3f(0, 0, 0);\nVector3f end = new Vector3f(1, 1, 1);\nfloat lerpFactor = 0.5;\nVector3f result = start.lerp(end, lerpFactor);\nSystem.out.println(result); // (0.5, 0.5, 0.5)\n",
              "description": ""
            },
            "name": "lerp",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1e6fff30-afeb-fe84-2241-98ab7746eb6a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds two `Vector3f` objects together, returning a new vector with the sum of the corresponding components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the sum of the input vectors' components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nVector3f vectorAdded = vector.add(new Vector3f(4, 5, 6)); // returns (5, 7, 9)\nSystem.out.println(vectorAdded);\n",
              "description": ""
            },
            "name": "add",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "989b04c8-0b94-81a5-af4f-d681f634a86d",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds the components of a vector object (`r`) to the corresponding components of the current object.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that adds to the current position of the object.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vec1 = new Vector3f(5, 7, 2);\nVector3f vec2 = new Vector3f(1, 2, 4);\nvec1.addSelf(vec2); // vec1 is now (6, 9, 6)\n",
              "description": ""
            },
            "name": "addSelf",
            "location": {
              "start": 72,
              "insert": 72,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 5,
            "docLength": null
          },
          {
            "id": "7ba1ddb2-9705-5ca4-6a41-0df976f07520",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds a floating-point value to a `Vector3f` object, returning a new `Vector3f` instance with the modified coordinates.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "3D vector to be added to the existing vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object representing the sum of the original vector and the specified floating-point value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nfloat r = 1;\nVector3f result = vector.add(r); // returns a new Vector3f with x + r, y + r, and z + r\n",
              "description": "\nIn this example, the method add is used on the object vector with an argument of type float 'r' and returns a new Vector3f object with updated coordinates x + r, y + r, and z + r."
            },
            "name": "add",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f18e7cab-fc0f-fa9f-c34f-b993149a101c",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Adds a vector to the current vector with a scaling factor applied to it. The resulting vector is returned.",
            "params": [
              {
                "name": "v",
                "type_name": "Vector3f",
                "description": "3D vector to be added to the current vector, multiplied by a scaling factor.",
                "complex_type": false
              },
              {
                "name": "scale",
                "type_name": "float",
                "description": "scalar value by which the input vector is multiplied before being added to the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector that is the sum of the input vector multiplied by the scale factor.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Vector3fTest {\n    @Test\n    public void testAddScaledVector() {\n        Vector3f v1 = new Vector3f(1, 2, 3);\n        Vector3f v2 = new Vector3f(4, 5, 6);\n        float scale = 0.5f;\n        Vector3f result = v1.addScaledVector(v2, scale);\n        \n        assertEquals(new Vector3f(1 + (4 * 0.5f), 2 + (5 * 0.5f), 3 + (6 * 0.5f)), result);\n    }\n}\n",
              "description": ""
            },
            "name": "addScaledVector",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3dac8408-ab20-dfb0-9141-e4366e4945f1",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies a `Vector3f` object by a scalar value and adds it to the current vector instance, scaling the existing values accordingly.",
            "params": [
              {
                "name": "v",
                "type_name": "Vector3f",
                "description": "3D vector to be scaled.",
                "complex_type": false
              },
              {
                "name": "scale",
                "type_name": "float",
                "description": "3D vector multiplication factor applied to the `v` argument.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void main() {\n\t\tVector3f v = new Vector3f(1, 2, 3);\n\t\tfloat scale = 5;\n\t\tv.addSelfScaledVector(v, scale);\n\t}\n",
              "description": ""
            },
            "name": "addSelfScaledVector",
            "location": {
              "start": 86,
              "insert": 86,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "892289ed-cea5-21a2-4549-c580af52aa58",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Subtracts a vector from another, returning a new vector representing the difference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be subtracted from the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` object representing the difference between the input vector and the reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f a = new Vector3f(1, 2, 3);\n    Vector3f b = new Vector3f(-1, -2, -3);\n    Vector3f result = a.sub(b);\n    System.out.println(\"The result is: \" + result.toString()); // Output: The result is (-1.0, 0.0, 0.0)\n}\n",
              "description": ""
            },
            "name": "sub",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8895452f-5414-b69e-bf4d-eaefe8440d43",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a single float argument `r` and returns a new `Vector3f` instance representing the difference between the original vector and the provided value.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "3D position of the offset from the original vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new `Vector3f` instance representing the difference between the original vector and the given value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat r = 4;\nVector3f difference = myVector.sub(r);\nSystem.out.println(difference.toString());\n// Output: (5, 6, 7)\n",
              "description": ""
            },
            "name": "sub",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9529bd5d-c079-0dbc-6742-7380f0072117",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies two `Vector3f` objects, returning a new vector with the product of the corresponding components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to multiply with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the product of the input vectors' coordinates.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nVector3f r = new Vector3f(-4, -5, -6);\n\nv.mul(r); // returns a vector with the values (-4, -10, -18)\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 98,
              "insert": 98,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d8bf05ac-8897-fa86-2745-769a4152b329",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Multiplies a vector by a scalar value, returning a new vector with the product.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scalar value to be multiplied with the vector components of the `Vector3f` object.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the product of the input `r` and each component of the original vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f(1, 2, 3);\nfloat scalarValue = 2;\n\n// Multiply the vector by a scalar value\nmyVector.mul(scalarValue);\nSystem.out.println(\"The multiplied vector is: \" + myVector);\n",
              "description": ""
            },
            "name": "mul",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4ea34c4b-e8b8-2b98-3244-12728497a1f9",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a `Vector3f` argument `r` and returns a new `Vector3f` instance with the components scaled by the reciprocal of the corresponding values of `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector that the `x`, `y`, and `z` components of the returned vector are divided by.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the same components as the input, but scaled by the reciprocal of the corresponding component of the argument vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Test {\n  public static void main(String[] args) {\n    Vector3f v1 = new Vector3f(2, 4, 6);\n    Vector3f v2 = new Vector3f(5, 10, 15);\n    Vector3f result = v1.div(v2);\n    System.out.println(\"Result: \" + result); // Result: (0.4, 0.8, 1.2)\n  }\n}\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 106,
              "insert": 106,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b7049326-fc46-759f-2a40-c8f151014e12",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Takes a scalar `r` and returns a new `Vector3f` instance with each component divided by `r`.",
            "params": [
              {
                "name": "r",
                "type_name": "float",
                "description": "scalar value used to divide each component of the `Vector3f` instance being manipulated.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a vector with the x, y, and z components scaled by the input value `r`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Vector3f myVector = new Vector3f(2, 4, 6);\nfloat scalar = 2;\nVector3f result = myVector.div(scalar); // result will have the value of (1, 2, 3)\n",
              "description": ""
            },
            "name": "div",
            "location": {
              "start": 110,
              "insert": 110,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "87ae3eda-7466-8fab-e44b-854055d69148",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Computes and returns a new `Vector3f` instance with the absolute values of its input components.",
            "params": [],
            "returns": {
              "type_name": "Vector3f",
              "description": "a new vector with the absolute value of the input values for `x`, `y`, and `z`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Example {\n  public static void main(String[] args) {\n    Vector3f vector = new Vector3f(-1, -2, -3);\n    Vector3f result = vector.abs(); // This will return a new Vector3f object with x=1, y=2, z=3.\n  }\n}\n",
              "description": ""
            },
            "name": "abs",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bcd8b3c1-1559-dfb5-5f45-1e53858edc59",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a string representation of an object, combining its three instance variables `x`, `y`, and `z`.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "a string representation of a point in 3D space, consisting of three separated values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vec = new Vector3f(1, 2, 3);\nSystem.out.println(vec.toString());\n// Output: (1 2 3)\n",
              "description": "\nIn this example, we create a Vector3f object with the x and y coordinates of 1 and 2, respectively, and the z coordinate of 3. We then call the toString method on the vec object using the println function in the System class, which will print the string representation of the vector to the console. The output will be \"(1 2 3)\"."
            },
            "name": "toString",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "abf9846b-f380-1b8d-cc42-b606a07881a9",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` instance representing the position of an entity with `x` and `y` coordinates.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the x and y coordinates of the point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nVector2f xy = v.getXY();\nSystem.out.println(xy); // Output: (1, 2)\n",
              "description": ""
            },
            "name": "getXY",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2b79b05b-5ebe-83b4-784e-b0f7713e5040",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object representing the y- and z-components of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object representing the Y and Z coordinates of a point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(10, 20, 30);\nVector2f yz = vector.getYZ();\nSystem.out.println(yz); // prints (20, 30)\n",
              "description": ""
            },
            "name": "getYZ",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9403afde-2054-b188-8247-24df1e17b88a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `z` and `x` components of an unknown input.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the `z` and `x` coordinates of a point.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVec = new Vector3f(1, 2, 3); // create a new vector with the values (1, 2, 3)\nVector2f zx = myVec.getZX(); // this will return a vector of the values (3, 1)\n",
              "description": "\nThis is because getZX returns a Vector2f of the values (z, x). In this case, z=3 and x=1 so the returned vector would be (3, 1)"
            },
            "name": "getZX",
            "location": {
              "start": 130,
              "insert": 130,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "30a95d7e-c229-d889-fc45-c3b121948b28",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the x and y coordinates of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object containing the values of `y` and `x`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3);\nfloat y = v.getY();\nfloat x = v.getX();\nv.set(y, x);\n",
              "description": ""
            },
            "name": "getYX",
            "location": {
              "start": 134,
              "insert": 134,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "de6db032-e8b6-b0a8-d241-2d0bd827e09f",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `z` and `y` coordinates of a point.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a vector with x-coordinate `z` and y-coordinate `y`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nvector.set(1, 2, 3);\nVector2f zy = vector.getZY();\nSystem.out.println(zy); // Output: (3, 2)\n",
              "description": "\nIn this example, we first create a new Vector3f object and set its x, y, and z values to 1, 2, and 3 respectively. Then, we call the getZY method on the vector object, which returns a new Vector2f object with the values (z, y) = (3, 2). We then print out the resulting Vector2f object using System.out.println() to verify that it has the expected values of (3, 2)."
            },
            "name": "getZY",
            "location": {
              "start": 138,
              "insert": 138,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "5ccf5428-79f1-ebad-8d43-724f7b834823",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns a `Vector2f` object containing the `x` and `z` components of an unknown quantity.",
            "params": [],
            "returns": {
              "type_name": "Vector2f",
              "description": "a `Vector2f` object representing the position of an entity in a 2D space, with `x` and `z` components.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class MyClass {\n    public static void main(String[] args) {\n        Vector3f vec = new Vector3f();\n        vec.set(-10, 0, 10);\n        Vector2f xz = vec.getXZ();\n        System.out.println(\"x = \" + xz.getX() + \", z = \" + xz.getY()); // Output: x = -10, z = 10\n    }\n}\n",
              "description": ""
            },
            "name": "getXZ",
            "location": {
              "start": 142,
              "insert": 142,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d0b26a7c-c257-c8aa-1645-8f1a4245d48f",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the `x`, `y`, and `z` components of the `Vector3f` object to the input values, returning the modified object.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "3D position of the vector along the x-axis.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of the vector, which is updated to match the value provided.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of the vector along the z-axis, which is updated to match the value provided by the user.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Vector3f",
              "description": "a reference to the modified `Vector3f` instance.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f();\nvector.set(1, 2, 3);\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 146,
              "insert": 146,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "271f6683-ae35-0690-d348-cd87bc819118",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the values of the `Vector3f` object to those of a given `Vector3f` reference.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be set as the value of the `Vector3f` instance.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a reference to the original `Vector3f` object, unchanged.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector1 = new Vector3f(0, 0, 0);\nVector3f vector2 = new Vector3f(5, 6, 7);\nvector1.set(vector2); // Sets vector1 to have the same coordinates as vector2\n",
              "description": ""
            },
            "name": "set",
            "location": {
              "start": 153,
              "insert": 153,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "dd5b6c29-4c8f-fc91-3e45-63903dac21ec",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Retrieves the value of a field named `x`. It returns the stored value as a `float` type.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the x coordinate of an object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nfloat xValue = vector.getX(); // returns the value of x, which is 1\n",
              "description": ""
            },
            "name": "getX",
            "location": {
              "start": 158,
              "insert": 158,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "24036aaf-8809-c291-bb4f-3cb014384a5c",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of the instance field `x` to the input `float` value provided in the method invocation.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "float value to be assigned to the `x` field of the class instance being manipulated by the function.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f v = new Vector3f(1, 2, 3); // create a new vector with coordinates (1, 2, 3)\nv.setX(5); // change the x-coordinate to 5\nSystem.out.println(v); // prints \"(5, 2, 3)\"\n",
              "description": ""
            },
            "name": "setX",
            "location": {
              "start": 162,
              "insert": 162,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0da1872d-c70f-768a-f446-3910d159bbbd",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Returns the value of the `y` field.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "a floating-point value representing the current value of the `y` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\tVector3f myVector = new Vector3f();\n\tmyVector.setX(5);\n\tmyVector.setY(10);\n\tSystem.out.println(\"My Y is \" + myVector.getY());\n}\n",
              "description": ""
            },
            "name": "getY",
            "location": {
              "start": 166,
              "insert": 166,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "41387ff7-5801-5589-e146-f2a0cbda7139",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of the `y` field of the object it is called on to the provided floating-point value.",
            "params": [
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of a point to be assigned to the `y` field of the object, which is then updated to reflect the new value.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1, 2, 3);\nvector.setY(5); // Sets the y coordinate of this vector to 5.\n",
              "description": ""
            },
            "name": "setY",
            "location": {
              "start": 170,
              "insert": 170,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c4856726-37e0-89b8-1147-970e87a9ba49",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Retrieves and returns the value of a `z` field, which is stored as a `float`.",
            "params": [],
            "returns": {
              "type_name": "float",
              "description": "the value of the `z` field.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f myVector = new Vector3f();\nfloat zCoordinate = myVector.getZ(); //zCoordinate = 0;\nmyVector.setZ(5);\nzCoordinate = myVector.getZ(); //zCoordinate = 5;\n",
              "description": ""
            },
            "name": "getZ",
            "location": {
              "start": 174,
              "insert": 174,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "12895609-b4b2-97ac-9247-a4f89f90492a",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Sets the value of an object's `z` field to the inputted float value.",
            "params": [
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of an object in the Java code's scope, and its value is assigned to the `z` field of the code's class.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "Vector3f vector = new Vector3f(1.0, 2.0, 3.0);\nvector.setZ(5.0);\nSystem.out.println(vector); // Outputs (1.0, 2.0, 5.0)\n",
              "description": ""
            },
            "name": "setZ",
            "location": {
              "start": 178,
              "insert": 178,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "04c0c813-ee28-698c-2044-811e029c5713",
            "ancestors": [
              "1e8196c2-a20b-5692-f148-e950e0d094f9"
            ],
            "type": "function",
            "description": "Compares the `Vector3f` object with another provided `Vector3f` object by checking the equivalence of its `x`, `y`, and `z` components.",
            "params": [
              {
                "name": "r",
                "type_name": "Vector3f",
                "description": "3D vector to be compared with the current vector.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the vector's components are equal to those of the provided reference vector.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Vector3f v1 = new Vector3f(0, 0, 0);\nVector3f v2 = new Vector3f(1, 1, 1);\nv1.equals(v2); // returns false since the coordinates are different\nv2.setX(0);\nv2.setY(0);\nv2.setZ(0);\nv1.equals(v2); // returns true since the coordinates are now equal",
              "description": ""
            },
            "name": "equals",
            "location": {
              "start": 182,
              "insert": 182,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Block.java",
    "path": "src/com/ch/voxel/Block.java",
    "content": {
      "structured": {
        "description": "A class named Block that represents a 3D voxel in a grid. The class has several instance fields including x, y, and z coordinates, as well as boolean flags for various properties such as whether the block is solid or not. The constructor initializes these fields and sets the boolean flags to their default values.",
        "items": [
          {
            "id": "b40c30c2-7faa-6c9b-1c43-55af02a4d5a7",
            "ancestors": [],
            "type": "function",
            "description": "Has a constructor with three parameters for x, y, and z coordinates and eight instance variables for boolean flags indicating various properties of the block.\nFields:\n\t- z (int): represents the vertical position of a block in a 3D space.\n\t- rt (boolean): represents whether the block has been right-clicked on by a player.\n\n",
            "fields": [
              {
                "name": "z",
                "type_name": "int",
                "value": null,
                "constant": false,
                "class_name": "Block",
                "description": "represents the vertical position of a block in a 3D space."
              },
              {
                "name": "rt",
                "type_name": "boolean",
                "value": null,
                "constant": false,
                "class_name": "Block",
                "description": "represents whether the block has been right-clicked on by a player."
              }
            ],
            "name": "Block",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "Chunk.java",
    "path": "src/com/ch/voxel/Chunk.java",
    "content": {
      "structured": {
        "description": "A 3D modeling library called \"CubeMaker\" that allows users to create and manipulate 3D cubes. The code includes several functions for creating and manipulating vertices, indices, and models, as well as handling various block types in the cube, such as faces, edges, and corners. The `genModel()` function generates a 3D model based on user input, while the `createModel()` function creates a default model for future use. The code also includes utility functions for converting vertex and index arrays to and from floats, as well as handling various edge and face types in the cube.",
        "items": [
          {
            "id": "d3c517a4-bfe6-4986-1e48-b27467525e22",
            "ancestors": [],
            "type": "function",
            "description": "Is used to load and manipulate 3D models in a Minecraft-like environment. It has various methods for generating and manipulating vertices, indices, and triangles, as well as creating a model from the generated data. The genModel method generates a new model based on the provided blocks, while the createModel method creates a new model instance.",
            "name": "Chunk",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 259,
            "docLength": null
          },
          {
            "id": "6ef4eba3-c33a-289c-764b-df38e4cc68e5",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Retrieves a `Model` object based on predefined conditions set by the `to_gen_model` flag. If the flag is true, the function creates a new model and sets the flag to false before returning it.",
            "params": [],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Model getModel() {\n\t\tif (to_gen_model) {\n\t\t\tcreateModel();\n\t\t\tto_gen_model = false;\n\t\t}\n\t\treturn model;\n\t}\n",
              "description": "\nThis code is fairly straightforward. It checks if the model needs to be generated, and then creates a new Model instance with the vertices and indices. Afterwards it returns the newly created model. The `to_gen_model` variable ensures that the method only runs once even if it is called multiple times during runtime.\n\nThe example uses the following assumptions:\n\n* `to_gen_model` is a member variable of the class. It is set to true when the program starts and then reset to false after the method has run successfully.\n* `vertices` and `indices` are arrays that hold all the necessary vertices and indices for the model.\n* The method `createModel()` is defined in the same class as `getModel()`. It takes no arguments and returns a new Model object.\n* A variable `model` is declared to store the newly created Model instance.\n\nPlease note that this code has not been tested and may contain errors, but it should give you an idea of how the method can be used in practice."
            },
            "name": "getModel",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 7,
            "docLength": null
          },
          {
            "id": "e61508cc-0269-62bc-a84c-28386bd85ddb",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a transformation matrix that translates an object by a distance equal to the product of its `x`, `y`, and `z` coordinates, scaled by the value of `CHUNK_SIZE`.",
            "params": [],
            "returns": {
              "type_name": "Matrix4f",
              "description": "a 4x4 homogeneous transformation matrix representing the camera's position and rotation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public Matrix4f getModelMatrix() {\n\treturn new Matrix4f().initTranslation(x * CHUNK_SIZE, y * CHUNK_SIZE, z * CHUNK_SIZE);\n}\n",
              "description": "\nIn this example, the method initTranslation initializes a 4x4 matrix using the translation method. The input for this method is three floats representing the x, y, and z coordinates to translate the model by. In this case, the model is moved by (x * CHUNK_SIZE, y * CHUNK_SIZE, z * CHUNK_SIZE) since the chunk size is 16.\nThe example code is very short, so it does not require any additional explanation to understand what is happening. Therefore, this code would be appropriate for a unit test that tests whether the matrix returned by getModelMatrix() translates the model correctly in the x, y, and z axes."
            },
            "name": "getModelMatrix",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "54a6c0f5-4886-72bb-8640-9e19e080b3f7",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Updates the blocks in a chunk by checking and updating their neighboring blocks based on the chunk's size and position in the game world.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "public class Chunk {\n    public static final int CHUNK_SIZE = 16;\n    public static final int CHUNK_SIZE_SQUARED = CHUNK_SIZE * CHUNK_SIZE;\n    public static final int CHUNK_SIZE_CUBED = CHUNK_SIZE * CHUNK_SIZE_SQUARED;\n    \n    private Block[] blocks = new Block[CHUNK_SIZE_CUBED];\n    \n    public void updateBlocks() {\n        for (int i = 0; i < CHUNK_SIZE_CUBED; i++) {\n            if (blocks[i] != null) {\n                int n_x = i - 1;\n                int p_x = i + 1;\n                int n_y = i - CHUNK_SIZE;\n                int p_y = i + CHUNK_SIZE;\n                int n_z = i - CHUNK_SIZE_SQUARED;\n                int p_z = i + CHUNK_SIZE_SQUARED;\n                \n                if (blocks[i].x - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].lt = false;\n                } else {\n                    Block bl = blocks[n_x];\n                    if (bl == null)\n                        blocks[i].lt = true;\n                    else\n                        blocks[i].lt = false;\n                }\n                if (blocks[i].y - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].bt = false;\n                } else {\n                    Block bl = blocks[n_y];\n                    if (bl == null)\n                        blocks[i].bt = true;\n                    else\n                        blocks[i].bt = false;\n                }\n                if (blocks[i].z - 1 < 0) {\n                    //TODO: check neighbor chunk\n                    blocks[i].ft = false;\n                } else {\n                    Block bl = blocks[n_z];\n                    if (bl == null)\n                        blocks[i].ft = true;\n                    else\n                        blocks[i].ft = false;\n                }\n                \n                if (blocks[i].x + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].rt = false;\n                } else {\n                    Block bl = blocks[p_x];\n                    if (bl == null)\n                        blocks[i].rt = true;\n                    else\n                        blocks[i].rt = false;\n                }\n                if (blocks[i].y + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].tp = false;\n                } else {\n                    Block bl = blocks[p_y];\n                    if (bl == null)\n                        blocks[i].tp = true;\n                    else\n                        blocks[i].tp = false;\n                }\n                if (blocks[i].z + 1 >= CHUNK_SIZE) {\n                    //TODO: check neighbor chunk\n                    blocks[i].bk = false;\n                } else {\n                    Block bl = blocks[p_z];\n                    if (bl == null)\n                        blocks[i].bk = true;\n                    else\n                        blocks[i].bk = false;\n                }\n            }\n        }\n    }\n}\n",
              "description": ""
            },
            "name": "updateBlocks",
            "location": {
              "start": 54,
              "insert": 54,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 75,
            "docLength": null
          },
          {
            "id": "704131ab-ae61-81aa-3648-e2644a892673",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a 3D model from a set of vertices, indices, and blocks. It recursively traverses the blocks, updating the vertex and index arrays, and filters out unnecessary data for textured cubes. The function also sets a flag to determine if it should load the generated model or continue generating it.",
            "params": [
              {
                "name": "now",
                "type_name": "boolean",
                "description": "whether to generate a new model or not.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void main(String[] args) {\n  // Initialize the class object and its member variables.\n  Blocks blocks = new Blocks();\n  \n  // Call toGenModel() with 'now' set to false, meaning that the model will not generate immediately but instead return a reference to it which can be stored for later use.\n  Model model = blocks.toGenModel(false);\n}\n",
              "description": "\nExplanation: The main method initializes an instance of Blocks and calls its toGenModel() method with 'now' set to false, meaning that the model will not generate immediately but instead return a reference to it which can be stored for later use."
            },
            "name": "toGenModel",
            "location": {
              "start": 148,
              "insert": 148,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 34,
            "docLength": null
          },
          {
            "id": "d38ab6a6-1a78-f0b3-b949-18e89e97c204",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Loads a 3D model from a buffer and stores it in a field, allowing for later use in the program.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void createModel() {\n\tthis.model = Model.load(Util.toFloatArray(vertices), Util.toIntArray(indices));\n}\n",
              "description": "\nIn this example, we are using the method createModel to load a model into memory.  The vertices and indices lists contain all the necessary information about the vertices and indices of a model, respectively.  We then use the Model.load() function to load them into the model variable.  This is an important part of the code because it creates the actual model in memory that will be used by other methods later on."
            },
            "name": "createModel",
            "location": {
              "start": 183,
              "insert": 183,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "292d48c2-ab66-e2b3-9547-9f06bb545ee0",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a model instance based on input parameters and returns it.",
            "params": [],
            "returns": {
              "type_name": "Model",
              "description": "a `Model` object containing the generated model data.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n\t// create a new Block instance\n\tBlock block = new Block(0, 0, 0);\n\n\t// generate the model from the block\n\tModel model = block.genModel();\n\n\t// print the vertices and indices of the model to the console\n\tSystem.out.println(\"Vertices: \" + Arrays.toString(model.getVertices()));\n\tSystem.out.println(\"Indices: \" + Arrays.toString(model.getIndices()));\n}\n",
              "description": "\nThis code creates a new Block instance at (0, 0, 0) and uses the method genModel() to generate the Model from the Block. The vertices and indices of the generated model are then printed to the console using the getVertices() and getIndices() methods of the Model class, respectively."
            },
            "name": "genModel",
            "location": {
              "start": 187,
              "insert": 187,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 6,
            "docLength": null
          },
          {
            "id": "89aa00bc-99ab-7784-7a42-eca0839f650f",
            "ancestors": [
              "d3c517a4-bfe6-4986-1e48-b27467525e22"
            ],
            "type": "function",
            "description": "Generates a set of vertices and indices for a 3D mesh based on the properties of a block. It adds vertices and indices to a list, increasing the index counter each time a new block is processed.",
            "params": [
              {
                "name": "vertices",
                "type_name": "List<Float>",
                "description": "2D vertices of the mesh being generated, and it is updated with new vertices calculated based on the block's properties.\n\n* It is a list of floating-point values representing 3D vertices.\n* The list is modified within the function to add new vertices based on the current block's geometry.",
                "complex_type": true
              },
              {
                "name": "indices",
                "type_name": "List<Integer>",
                "description": "3D indices of the vertices in the mesh, which are used to identify and update the corresponding vertex positions in the block.\n\n* It is a list of integers representing the vertices of a polyhedron.\n* Its size is equal to the number of vertices in the polyhedron, which is calculated during each iteration of the loop.\n* Each element in the list corresponds to a vertex in the polyhedron, where the indices start from 0 and increase by 1 for each subsequent vertex.",
                "complex_type": true
              },
              {
                "name": "block",
                "type_name": "Block",
                "description": "3D block being rendered, and its properties are used to determine which vertices and indices to add to the list of vertices and indices, respectively.\n\n* `ft`: Block has a face on top.\n* `bk`: Block has a back face.\n* `bt`: Block has a top face.\n* `tp`: Block has a top plane.\n* `lt`: Block has a left face.\n* `rt`: Block has a right face.",
                "complex_type": true
              },
              {
                "name": "max_index",
                "type_name": "int",
                "description": "0-based index of the current block being processed, and is used to keep track of the number of vertices and indices generated for each block.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "int",
              "description": "a new index value added to the `indices` list and an increased `max_index` value.",
              "complex_type": false
            },
            "name": "gen",
            "location": {
              "start": 194,
              "insert": 194,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 74,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "World.java",
    "path": "src/com/ch/voxel/World.java",
    "content": {
      "structured": {
        "description": "A 3D rendering engine with Chunk objects representing 3D blocks in a grid, and a World object holding the chunks. The Chunk class has several methods for updating and rendering itself and its contents, including rendering with a shader and a camera. The main method of the code is a thread that updates and renders the chunks in parallel using an internal thread pool. The render method takes a shader and a camera as parameters and renders each chunk's model matrix multiplied by the view projection matrix.",
        "items": [
          {
            "id": "af6573c0-5b93-0eb9-2f42-f5247d77b12c",
            "ancestors": [],
            "type": "function",
            "description": "Is responsible for managing the rendering of chunks in a Minecraft-like game. It has several methods and fields related to chunk rendering, including `render`, `chunks`, and `x`, `y`, and `z`. The `render` method takes a shader and camera object as parameters and renders each chunk in the world using the shader's uniforms to set the color of the chunk based on its position.",
            "name": "World",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 233,
            "docLength": null
          },
          {
            "id": "60e743e5-3417-3ab3-4e4d-22c722283692",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Generates a 3D grid of Chunk objects, each representing a specific block in the game world, by recursively calling itself for each chunk position within a fixed size area.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "private void gen() {\n    for (int i = 0; i < W; i++) {\n        for (int j = 0; j < H; j++) {\n            for (int k = 0; k < D; k++) {\n                chunks[i][j][k] = new Chunk(i - W / 2 + x, j - H / 2 + y, k - D / 2 + z);\n                chunks[i][j][k].updateBlocks();\n                chunks[i][j][k].toGenModel();\n            }\n        }\n    }\n}\n",
              "description": "\nThe example code should be as short and concise as possible. It is important to reason through the code before writing it, as well as testing the example to ensure it works correctly. Additionally, this method does not create a unit test example or provide an explanation of the code written. Instead, it simply creates a loop that initializes a 3D array of chunks with a new chunk object at each index, calls the updateBlocks() and toGenModel() methods on each chunk, and sets the x, y, and z values for each chunk to the same value as the World object."
            },
            "name": "gen",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          },
          {
            "id": "af87cf17-c176-95b8-a843-3c3ceba05f3c",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Updates the position of the `World` object based on the difference between the current position and the desired position, and then generates a new chunk if necessary.",
            "params": [
              {
                "name": "x",
                "type_name": "float",
                "description": "2D coordinates of the chunk being updated, and is used to determine which chunks are affected by the update and need to be generated or re-generated.",
                "complex_type": false
              },
              {
                "name": "y",
                "type_name": "float",
                "description": "2D coordinate of the chunk's position in the world, which is used to determine the appropriate chunk to update based on the `x` and `z` parameters.",
                "complex_type": false
              },
              {
                "name": "z",
                "type_name": "float",
                "description": "3D position of the chunk to update, and it is used to determine which chunks need to be updated based on their distance from the player's position.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "World world = new World();\nworld.updatePos(10, 25, -10); // moves the world by 10 in x direction and 25 in y direction and -10 in z direction\n",
              "description": "\nHere, the `World` object is updated with position `(10, 25, -10)` which moves it by that much in each axis.\n\nIt's important to note that this code does not actually move anything, only updates the internal state of the `World` object. To update the state of the world and perform actual movement, you need to call a method like `gen()` or another one that is responsible for generating the chunks based on the new coordinates."
            },
            "name": "updatePos",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 183,
            "docLength": null
          },
          {
            "id": "9b97a60a-89b2-6fb1-eb45-37bbce53f420",
            "ancestors": [
              "af6573c0-5b93-0eb9-2f42-f5247d77b12c"
            ],
            "type": "function",
            "description": "Renders a 3D scene using a shader and a camera. It iterates over chunks of the scene, applying transformations to the chunk's model matrix and then drawing the chunk using the shader.",
            "params": [
              {
                "name": "s",
                "type_name": "Shader",
                "description": "3D rendering shader that is being applied to the 2D graphics, and it is used by the function to set the uniform values for the shader using the `uniformf` method.\n\n* `s` is a Shader object that represents a shader program.\n* It has various uniforms and attributes that can be modified during rendering.\n* The shader program can be used to render 3D graphics by setting its uniforms and attributes and then drawing the 3D objects using the `draw()` method.",
                "complex_type": true
              },
              {
                "name": "c",
                "type_name": "Camera",
                "description": "3D camera used to render the scene, and it is used to compute the view-projection matrix that is applied to the 3D models before they are drawn.\n\n* `Camera c`: This is an instance of a camera class, representing the camera's perspective on the 3D scene. It has various properties such as the viewport size, projection matrix, and modelview matrix.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class Example {\n    public static void main(String[] args) {\n        Shader s = new Shader();\n        Camera c = new Camera();\n        World w = new World();\n        \n        // Render the world with this shader and camera\n        w.render(s, c);\n    }\n}\n",
              "description": "\nIn this example, we create a new shader object called s, a new camera object called c, and a new world object called w. We then call the render method on the world object, passing in the shader object s and the camera object c as arguments. The render method will then use these objects to draw the 3D model of the world onto the screen.\n\nNote that this is just an example of how the method could be used, and you may need to modify it to fit your specific needs. Additionally, you may also need to create the Shader and Camera classes yourself or retrieve them from elsewhere in your code."
            },
            "name": "render",
            "location": {
              "start": 218,
              "insert": 218,
              "offset": "\t",
              "indent": 1,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  }
]